<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxの瓜园</title>
  
  
  <link href="http://watermelondrip.github.io/atom.xml" rel="self"/>
  
  <link href="http://watermelondrip.github.io/"/>
  <updated>2021-02-28T10:19:43.014Z</updated>
  <id>http://watermelondrip.github.io/</id>
  
  <author>
    <name>西瓜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day 1 - Max</title>
    <link href="http://watermelondrip.github.io/2021/02/28/firstday_max/"/>
    <id>http://watermelondrip.github.io/2021/02/28/firstday_max/</id>
    <published>2021-02-28T10:16:24.578Z</published>
    <updated>2021-02-28T10:19:43.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p><em>by max</em></p><p><em>2021/02/28</em></p><p>这是在MAX的瓜园写下的第一篇日志，没有具体的内容，仅供测试使用。</p><p><strong>建立这个博客网页的主要目的是为了记录刷题过程中的收获，包括题解、算法思路和一些相关资料等。</strong></p><p><code>此网站也会收藏一些平日学习和工作中有价值的资料</code></p><p>网站仍在建设中，更多功能会逐步完善，包括评论功能等，敬请期待！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h1&gt;&lt;p&gt;&lt;em&gt;by max&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2021/02/28&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这是在MAX的瓜</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构的分析</title>
    <link href="http://watermelondrip.github.io/2021/02/28/dataStructure/"/>
    <id>http://watermelondrip.github.io/2021/02/28/dataStructure/</id>
    <published>2021-02-28T10:12:34.554Z</published>
    <updated>2021-02-28T10:18:55.580Z</updated>
    
    <content type="html"><![CDATA[<ol><li>内存的物理表现的一系列连续的内存单元，每个内存单元大小是固定的。数据结构只有两个对应基础的数据结构，数组和链表，其他的数据结构都是由他们产生的。</li><li> 数组用来表示连续的内存空间，链表通常用来表示不连续的内存空间。</li><li>不连续内存空间的意思是，链表有数据域和指针域。</li></ol><hr><h2 id="算法的性能"><a href="#算法的性能" class="headerlink" title="算法的性能"></a>算法的性能</h2><ol><li>一个程序的运行时间主要主要是两个因素：（1）执行每条语句的耗时（2）执行每条语句的频率。</li></ol><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li>操作简单和支持随机访问</li><li>数组是一段连续的地址空间</li><li>数组使用连续的内存空间，来存储一系列同一数据类型的值。</li></ol><hr><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ol><li>栈是一种受限的数据结构，LIFO</li><li>常用操作：进栈push, 出栈pop，取栈顶top，isEmply</li><li>是一种逻辑结构</li><li>给数组和链表增加一个限制就是队列</li></ol><hr><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ol><li>也是一种逻辑结构</li><li>给数组和链表增加一个限制就是队列</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;内存的物理表现的一系列连续的内存单元，每个内存单元大小是固定的。数据结构只有两个对应基础的数据结构，数组和链表，其他的数据结构都是由他们产生的。&lt;/li&gt;
&lt;li&gt; 数组用来表示连续的内存空间，链表通常用来表示不连续的内存空间。&lt;/li&gt;
&lt;li&gt;不连续内存空间</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>双指针</title>
    <link href="http://watermelondrip.github.io/2021/02/28/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>http://watermelondrip.github.io/2021/02/28/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2021-02-28T10:12:33.454Z</published>
    <updated>2021-02-28T10:18:19.237Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="双指针-顺序"><a href="#双指针-顺序" class="headerlink" title="双指针(顺序)"></a>双指针(<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8F%8C%E6%8C%87%E9%92%88.md#1-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84-two-sum">顺序</a>)</h2><p>双指针用于遍历数组，两个指针指向不同的元素，从而共同的完成一个任务。<br>（1）共同完成一个和的target<br>##1. (LC167) 两数之和 II - 输入有序数组   <a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/description/">两数之和II</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个已按照 升序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p><p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 1 开始计数 ，所以答案数组应当满足 1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length 。</p><p>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br> 示例 1：</p><p>输入：numbers = [2,7,11,15], target = 9<br>输出：[1,2]<br>解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>双指针<br>如何想到双指针，我觉得首先是这个数组是有序的，然后就是由两个数构成，这就想到了双指针了</p><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[int]:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(numbers)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt; right:</span><br><span class="line">            total = numbers[left] + numbers[right]</span><br><span class="line">            <span class="keyword">if</span> total &gt; target:</span><br><span class="line">                right-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> total &lt; target:</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [left+<span class="number">1</span>, right+<span class="number">1</span>]                </span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$ 只是遍历了一次</li><li>空间复杂度：$O(1)$ 只用了两个额外的变量（不考虑输出变量空间，只考虑额外的）<br>##2. (LC633) 两数平方和   <a href="https://leetcode-cn.com/problems/sum-of-square-numbers/description/">两数平方和</a><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3>给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c 。</li></ul><p>示例 1：</p><p>输入：c = 5<br>输出：true<br>解释：1 * 1 + 2 * 2 = 5<br>范围：0 &lt;= c &lt;= 2^31 - 1</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>首先这个又是两个整数的，我们想如果出现两个整数共同来完成一件事，这两个整数在一个范围内，是不是都可以用双指针呢。<br>但是这里面有平方比较麻烦了，所以上面那个不是和吗，我想如果求出c的根号是不是在这附近的数就比较好找了</p><h3 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judgeSquareSum</span>(<span class="params">self, c: <span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sqr</span>(<span class="params">c</span>):</span></span><br><span class="line">            x0 = c/<span class="number">2</span></span><br><span class="line">            x1 = x0/<span class="number">2</span> + c/(x0*<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">abs</span>(x1-x0) &gt; <span class="number">1</span>:</span><br><span class="line">                x0 = x1</span><br><span class="line">                x1 = x0/<span class="number">2</span> + c/(x0*<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> x1</span><br><span class="line">        right,left = <span class="built_in">int</span>(sqr(c)),<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            print(left**<span class="number">2</span> + right**<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> left**<span class="number">2</span> + right**<span class="number">2</span> &gt; c:</span><br><span class="line">                right-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> left**<span class="number">2</span> + right**<span class="number">2</span> &lt; c:</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> </span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(sqr(c)*n1)$ 只是遍历了一次 def sqrt(c)</li><li>空间复杂度：$O(1)$ 只用了两个额外的变量</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;双指针-顺序&quot;&gt;&lt;a href=&quot;#双指针-顺序&quot; class=&quot;headerlink&quot; title=&quot;双指针(顺序)&quot;&gt;&lt;/a&gt;双指针(&lt;a href=&quot;https://github.com/CyC2018/CS-Notes/blob/master/n</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>leetcode lc 395（至少有k个重复字符的最长子串）</title>
    <link href="http://watermelondrip.github.io/2021/02/27/lc395/"/>
    <id>http://watermelondrip.github.io/2021/02/27/lc395/</id>
    <published>2021-02-27T11:00:46.438Z</published>
    <updated>2021-02-27T11:05:43.564Z</updated>
    
    <content type="html"><![CDATA[<p>date: 2021-02-27 16:19:03</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>递归<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2></li></ul><p><a href="https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/">https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 s 和一个整数 k ，请你找出 s 中的最长子串， 要求该子串中的每一字符出现次数都不少于 k 。返回这一子串的长度。（难度中等） </p><p>示例 1：</p><p>输入：s = “aaabb”, k = 3<br>输出：3<br>解释：最长子串为 “aaa” ，其中 ‘a’ 重复了 3 次。<br>示例 2：</p><p>输入：s = “ababbc”, k = 2<br>输出：5<br>解释：最长子串为 “ababb” ，其中 ‘a’ 重复了 2 次， ‘b’ 重复了 3 次。 </p><p>提示：</p><p>1 &lt;= s.length &lt;= 104<br>s 仅由小写英文字母组成<br>1 &lt;= k &lt;= 105</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><p>递归</p><h2 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h2></li><li><p>暂无</p></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>首先我是没想出来，看了答案发现了这个思路</li><li>要连续子序列也就是想当于如果出现了个数最少的字母，我们需要从那个最少的字母那里断开这个序列，直到把所有少于k的字母全部断开，然后从断开的所有子序列里找个最长的</li></ul><ul><li>对于split 那个function 还是不太清晰，我觉得有必要我整理一下<ul><li>The split() method splits a string into a list. 比如： txt = “hello, my name is Peter, I am 26 years old”； x = txt.split(“, “)  output: x=[‘hello’, ‘my name is Peter’, ‘I am 26 years old’]<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ul></li></ul><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestSubstring</span>(<span class="params">self, s, k</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s)&lt;k:  <span class="comment">#base </span></span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">set</span>(s):</span><br><span class="line">            <span class="keyword">if</span> s.count(c) &lt; k:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">max</span>( self.longestSubstring(t, k) <span class="keyword">for</span> t <span class="keyword">in</span> s.split(c) )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>return 那块，前面self.longestSubstring，前面已经有self,后面的括号里就不要加了</li><li>s.split(c) 这个语句中，如果输入是“aaabb”. 输出是[“aaa”,”,”]</li></ul><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：$O(n<em>26)$  n(字符串长度)</em>(字符集) 因为递归最多26次（26个英文字母）</li><li>空间复杂度：$O(26^2)$  每层需要开辟26个字母的空间</li></ul><h2 id="大佬解题"><a href="#大佬解题" class="headerlink" title="大佬解题"></a>大佬解题</h2><ul><li><a href="https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/solution/jie-ben-ti-bang-zhu-da-jia-li-jie-di-gui-obla/">https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/solution/jie-ben-ti-bang-zhu-da-jia-li-jie-di-gui-obla/</a></li><li><a href="https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/solution/jiang-yuan-zi-fu-chuan-yi-shu-liang-bu-gou-de-zi-f/">https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/solution/jiang-yuan-zi-fu-chuan-yi-shu-liang-bu-gou-de-zi-f/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;date: 2021-02-27 16:19:03&lt;/p&gt;
&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;递归&lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一天坚持坚持</title>
    <link href="http://watermelondrip.github.io/2021/02/27/firstday/"/>
    <id>http://watermelondrip.github.io/2021/02/27/firstday/</id>
    <published>2021-02-27T05:19:03.000Z</published>
    <updated>2021-02-27T05:20:45.333Z</updated>
    
    <content type="html"><![CDATA[<p>第一次记录一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一次记录一下&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
