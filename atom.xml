<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MAXの瓜园</title>
  
  <subtitle>放弃很容易，但坚持一定很酷😎</subtitle>
  <link href="http://watermelondrip.github.io/atom.xml" rel="self"/>
  
  <link href="http://watermelondrip.github.io/"/>
  <updated>2021-05-27T07:14:03.608Z</updated>
  <id>http://watermelondrip.github.io/</id>
  
  <author>
    <name>快乐地瓜🍠</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工具</title>
    <link href="http://watermelondrip.github.io/2021/06/01/%E5%B7%A5%E5%85%B7%E4%BB%AC/"/>
    <id>http://watermelondrip.github.io/2021/06/01/%E5%B7%A5%E5%85%B7%E4%BB%AC/</id>
    <published>2021-05-31T14:00:00.000Z</published>
    <updated>2021-05-27T07:14:03.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>在线画板：<a href="https://excalidraw.com">https://excalidraw.com</a></p></li><li><p>markdown github code block</p></li><li><p>‘<img src= "/img/watermelon.gif" data-lazy-src="direction.png" style="zoom:40%">‘</p></li><li><p><a href="https://carbon.now.sh/?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=monokai&amp;wt=none&amp;l=auto&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false">Create and share beautiful images of your source code.</a></p></li><li><p><a href="https://sspai.com/post/52176">我的最后一款笔记应用-Notion</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>计划</title>
    <link href="http://watermelondrip.github.io/2021/06/01/%E8%AE%A1%E5%88%92/"/>
    <id>http://watermelondrip.github.io/2021/06/01/%E8%AE%A1%E5%88%92/</id>
    <published>2021-05-31T14:00:00.000Z</published>
    <updated>2021-05-08T02:01:48.036Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><ul><li><p>deadline Review: 2021-06-01</p></li><li><p>写review, 所有responce的仿真0501跑完</p></li><li><p>保1争2（Til 20210701）</p></li></ul><ul><li><p>学学xcode how to use</p></li><li><p>学学Pandas dataframe (GreeksforGreeks)</p></li><li><p>把pdf（C++PRIME）传到blog上，教程好找。 (地址)[<a href="https://github.com/SabrinaHuang/CppPrimeExercise/blob/master/C%2B%2B%20Primer%E7%AC%AC%E4%BA%94%E7%89%88%E4%B8%AD%E6%96%87%E7%89%88.pdf">https://github.com/SabrinaHuang/CppPrimeExercise/blob/master/C%2B%2B%20Primer%E7%AC%AC%E4%BA%94%E7%89%88%E4%B8%AD%E6%96%87%E7%89%88.pdf</a>]</p></li><li><p>学学Heroku</p></li></ul>]]></content>
    
    
    <summary type="html">deadline Review  2021-06-01</summary>
    
    
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面筋</title>
    <link href="http://watermelondrip.github.io/2021/06/01/%E9%9D%A2%E7%AD%8B/"/>
    <id>http://watermelondrip.github.io/2021/06/01/%E9%9D%A2%E7%AD%8B/</id>
    <published>2021-05-31T14:00:00.000Z</published>
    <updated>2021-05-26T02:50:20.172Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>提问：<br>不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。<br>是什么意思呢~？ 类是指什么？ 无状态是什么样的，能给举个有状态和无状态的例子吗~ 感谢~！<ul><li>我觉得就是你function里的状态只能用local variable存 不许用member var 或者 global var。然后这个function 里面的状态不能对这个function scope 外的变量有access</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode竞赛(第242场周赛)</title>
    <link href="http://watermelondrip.github.io/2021/05/24/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B242/"/>
    <id>http://watermelondrip.github.io/2021/05/24/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B242/</id>
    <published>2021-05-23T14:00:00.000Z</published>
    <updated>2021-05-24T09:32:17.573Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h1><p> <a href="https://leetcode-cn.com/problems/longer-contiguous-segments-of-ones-than-zeros/">1869. 哪种连续子字符串更长</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个二进制字符串 s 。如果字符串中由 1 组成的 最长 连续子字符串 严格长于 由 0 组成的 最长 连续子字符串，返回 true ；否则，返回 false 。</p><p>例如，s = “110100010” 中，由 1 组成的最长连续子字符串的长度是 2 ，由 0 组成的最长连续子字符串的长度是 3 。<br>注意，如果字符串中不存在 0 ，此时认为由 0 组成的最长连续子字符串的长度是 0 。字符串中不存在 1 的情况也适用此规则。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "1101"</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">由 1 组成的最长连续子字符串的长度是 2："1101"</span><br><span class="line">由 0 组成的最长连续子字符串的长度是 1："1101"</span><br><span class="line">由 1 组成的子字符串更长，故返回 true 。 </span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkZeroOnes</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        ones, mo = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        zeros, mz = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">'0'</span>:</span><br><span class="line">                <span class="keyword">if</span> zeros == <span class="number">0</span>:</span><br><span class="line">                    mo = <span class="built_in">max</span>(mo, ones)</span><br><span class="line">                    ones = <span class="number">0</span></span><br><span class="line">                zeros += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> ones == <span class="number">0</span>:</span><br><span class="line">                    mz = <span class="built_in">max</span>(mz, zeros)</span><br><span class="line">                    zeros = <span class="number">0</span></span><br><span class="line">                ones += <span class="number">1</span></span><br><span class="line">        mo = <span class="built_in">max</span>(mo, ones)</span><br><span class="line">        mz = <span class="built_in">max</span>(mz, zeros)</span><br><span class="line">        <span class="keyword">return</span> mo&gt;mz</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(n)$  </li></ul><h1 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h1><p> <a href="https://leetcode-cn.com/problems/minimum-speed-to-arrive-on-time/">1870. 准时到达的列车最小时速</a></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个浮点数 hour ，表示你到达办公室可用的总通勤时间。要到达办公室，你必须按给定次序乘坐 n 趟列车。另给你一个长度为 n 的整数数组 dist ，其中 dist[i] 表示第 i 趟列车的行驶距离（单位是千米）。</p><p>每趟列车均只能在整点发车，所以你可能需要在两趟列车之间等待一段时间。</p><p>例如，第 1 趟列车需要 1.5 小时，那你必须再等待 0.5 小时，搭乘在第 2 小时发车的第 2 趟列车。<br>返回能满足你准时到达办公室所要求全部列车的 最小正整数 时速（单位：千米每小时），如果无法准时到达，则返回 -1 。</p><p>生成的测试用例保证答案不超过 107 ，且 hour 的 小数点后最多存在两位数字 。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：dist = [1,3,2], hour = 2.7</span><br><span class="line">输出：3</span><br><span class="line">解释：速度为 3 时：</span><br><span class="line">- 第 1 趟列车运行需要 1/3 = 0.33333 小时。</span><br><span class="line">- 由于不是在整数时间到达，故需要等待至第 1 小时才能搭乘列车。第 2 趟列车运行需要 3/3 = 1 小时。</span><br><span class="line">- 由于是在整数时间到达，可以立即换乘在第 2 小时发车的列车。第 3 趟列车运行需要 2/3 = 0.66667 小时。</span><br><span class="line">- 你将会在第 2.66667 小时到达。 </span><br></pre></td></tr></tbody></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>二分</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSpeedOnTime</span>(<span class="params">self, dist: List[<span class="built_in">int</span>], hour: <span class="built_in">float</span></span>) -&gt; int:</span></span><br><span class="line">        len_dist = <span class="built_in">len</span>(dist)</span><br><span class="line">        <span class="keyword">if</span> hour &lt; len_dist-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        lower_bound = ceil(<span class="built_in">sum</span>(dist)/hour)</span><br><span class="line">        </span><br><span class="line">        l = lower_bound</span><br><span class="line">        r = <span class="number">10</span>**<span class="number">7</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            mid  = (l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len_dist): <span class="comment">#calculate hour</span></span><br><span class="line">                <span class="keyword">if</span> j == <span class="built_in">len</span>(dist)-<span class="number">1</span>:</span><br><span class="line">                    temp += dist[j]/mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    temp = ceil(dist[j]/mid) + temp</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> temp &lt;= hour:</span><br><span class="line">                r = mid </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid+<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(nlogn)$ 遍历一遍</li><li>空间复杂度：$O(1)$  </li></ul><h1 id="3-题目"><a href="#3-题目" class="headerlink" title="3. 题目"></a>3. 题目</h1><p> <a href="https://leetcode-cn.com/problems/jump-game-vii/">1871. 跳跃游戏 VII</a></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个下标从 0 开始的二进制字符串 s 和两个整数 minJump 和 maxJump 。一开始，你在下标 0 处，且该位置的值一定为 ‘0’ 。当同时满足如下条件时，你可以从下标 i 移动到下标 j 处：</p><p>i + minJump &lt;= j &lt;= min(i + maxJump, s.length - 1) 且<br>s[j] == ‘0’.<br>如果你可以到达 s 的下标 s.length - 1 处，请你返回 true ，否则返回 false 。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "011010", minJump = 2, maxJump = 3</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">第一步，从下标 0 移动到下标 3 。</span><br><span class="line">第二步，从下标 3 移动到下标 5 。 </span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ul><li>大牛的， 自己还不会这个题。</li></ul><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canReach</span>(<span class="params">self, s: <span class="built_in">str</span>, mn: <span class="built_in">int</span>, mx: <span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">        q = deque()</span><br><span class="line">        q.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">'1'</span>:</span><br><span class="line">                <span class="keyword">continue</span>            </span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(q) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> q[<span class="number">0</span>] + mn &lt;= i &lt;= q[<span class="number">0</span>] + mx:</span><br><span class="line">                    q.append(i)</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="built_in">len</span>(s) - <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> q[<span class="number">0</span>] + mx &lt; i:</span><br><span class="line">                    q.popleft()</span><br><span class="line">                <span class="keyword">elif</span> q[<span class="number">0</span>] + mn &gt; i:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># print(i, q)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(1)$ </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣周赛" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode竞赛(第241场周赛)</title>
    <link href="http://watermelondrip.github.io/2021/05/17/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B241/"/>
    <id>http://watermelondrip.github.io/2021/05/17/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B241/</id>
    <published>2021-05-16T14:00:00.000Z</published>
    <updated>2021-05-19T13:14:36.908Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h1><p> <a href="https://leetcode-cn.com/problems/sum-of-all-subset-xor-totals/">找出所有子集的异或总和再求和</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个数组的 异或总和 定义为数组中所有元素按位 XOR 的结果；如果数组为 空 ，则异或总和为 0 。</p><p>例如，数组 [2,5,6] 的 异或总和 为 2 XOR 5 XOR 6 = 1 。<br>给你一个数组 nums ，请你求出 nums 中每个 子集 的 异或总和 ，计算并返回这些值相加之 和 。</p><p>注意：在本题中，元素 相同 的不同子集应 多次 计数。</p><p>数组 a 是数组 b 的一个 子集 的前提条件是：从 b 删除几个（也可能不删除）元素能够得到 a 。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3]</span><br><span class="line">输出：6</span><br><span class="line">解释：[1,3] 共有 4 个子集：</span><br><span class="line">- 空子集的异或总和是 0 。</span><br><span class="line">- [1] 的异或总和为 1 。</span><br><span class="line">- [3] 的异或总和为 3 。</span><br><span class="line">- [1,3] 的异或总和为 1 XOR 3 = 2 。</span><br><span class="line">0 + 1 + 3 + 2 = 6 </span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>一个典型的回溯题</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsetXORSum</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">start,path,size</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) == size:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start,<span class="built_in">len</span>(nums)):</span><br><span class="line">                </span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtrack(i+<span class="number">1</span>, path, size)</span><br><span class="line">                path.pop( )</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(nums)+<span class="number">1</span>):</span><br><span class="line">            backtrack(<span class="number">0</span>,[],n)</span><br><span class="line">           </span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">         </span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res[i])):</span><br><span class="line">                tmp = tmp^res[i][j]</span><br><span class="line">            output+=   tmp</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">            </span><br><span class="line">        </span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(n)$  </li></ul><h1 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h1><p> <a href="https://leetcode-cn.com/problems/splitting-a-string-into-descending-consecutive-values/">1849. 将字符串拆分为递减的连续值</a></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个仅由数字组成的字符串 s 。</p><p>请你判断能否将 s 拆分成两个或者多个 非空子字符串 ，使子字符串的 数值 按 降序 排列，且每两个 相邻子字符串 的数值之 差 等于 1 。</p><p>例如，字符串 s = “0090089” 可以拆分成 [“0090”, “089”] ，数值为 [90,89] 。这些数值满足按降序排列，且相邻值相差 1 ，这种拆分方法可行。<br>另一个例子中，字符串 s = “001” 可以拆分成 [“0”, “01”]、[“00”, “1”] 或 [“0”, “0”, “1”] 。然而，所有这些拆分方法都不可行，因为对应数值分别是 [0,1]、[0,1] 和 [0,0,1] ，都不满足按降序排列的要求。<br>如果可以按要求拆分 s ，返回 true ；否则，返回 false 。</p><p>子字符串 是字符串中的一个连续字符序列。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "050043"</span><br><span class="line">输出：true</span><br><span class="line">解释：s 可以拆分为 ["05", "004", "3"] ，对应数值为 [5,4,3] 。</span><br><span class="line">满足按降序排列，且相邻值相差 1 。 </span><br></pre></td></tr></tbody></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>枚举第一个字符串</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsetXORSum</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">start,path,size</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) == size:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start,<span class="built_in">len</span>(nums)):</span><br><span class="line">                </span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtrack(i+<span class="number">1</span>, path, size)</span><br><span class="line">                path.pop( )</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(nums)+<span class="number">1</span>):</span><br><span class="line">            backtrack(<span class="number">0</span>,[],n)</span><br><span class="line">           </span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">         </span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res[i])):</span><br><span class="line">                tmp = tmp^res[i][j]</span><br><span class="line">            output+=   tmp</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n^2)$ 遍历一遍</li><li>空间复杂度：$O(1)$  </li></ul><h1 id="3-题目"><a href="#3-题目" class="headerlink" title="3. 题目"></a>3. 题目</h1><p> <a href="https://leetcode-cn.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/">1865. 找出和为指定值的下标对</a></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你两个整数数组 nums1 和 nums2 ，请你实现一个支持下述两类查询的数据结构：</p><p>累加 ，将一个正整数加到 nums2 中指定下标对应元素上。<br>计数 ，统计满足 nums1[i] + nums2[j] 等于指定值的下标对 (i, j) 数目（0 &lt;= i &lt; nums1.length 且 0 &lt;= j &lt; nums2.length）。<br>实现 FindSumPairs 类：</p><p>FindSumPairs(int[] nums1, int[] nums2) 使用整数数组 nums1 和 nums2 初始化 FindSumPairs 对象。<br>void add(int index, int val) 将 val 加到 nums2[index] 上，即，执行 nums2[index] += val 。<br>int count(int tot) 返回满足 nums1[i] + nums2[j] == tot 的下标对 (i, j) 数目。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">["FindSumPairs", "count", "add", "count", "count", "add", "add", "count"]</span><br><span class="line">[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]</span><br><span class="line">输出：</span><br><span class="line">[null, 8, null, 2, 1, null, null, 11]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);</span><br><span class="line">findSumPairs.count(7);  // 返回 8 ; 下标对 (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) 满足 2 + 5 = 7 ，下标对 (5,1), (5,5) 满足 3 + 4 = 7</span><br><span class="line">findSumPairs.add(3, 2); // 此时 nums2 = [1,4,5,4,5,4]</span><br><span class="line">findSumPairs.count(8);  // 返回 2 ；下标对 (5,2), (5,4) 满足 3 + 5 = 8</span><br><span class="line">findSumPairs.count(4);  // 返回 1 ；下标对 (5,0) 满足 3 + 1 = 4</span><br><span class="line">findSumPairs.add(0, 1); // 此时 nums2 = [2,4,5,4,5,4]</span><br><span class="line">findSumPairs.add(1, 1); // 此时 nums2 = [2,5,5,4,5,4]</span><br><span class="line">findSumPairs.count(7);  // 返回 11 ；下标对 (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) 满足 2 + 5 = 7 ，下标对 (5,3), (5,5) 满足 3 + 4 = 7</span><br></pre></td></tr></tbody></table></figure><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ul><li></li></ul><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestBeautifulSubstring</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        output= <span class="number">0</span></span><br><span class="line">        list_word = <span class="built_in">list</span>(word)</span><br><span class="line">        yuanyin = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>]</span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word):</span><br><span class="line">            <span class="keyword">if</span> list_word[i] == <span class="string">'a'</span> <span class="keyword">and</span> step == <span class="number">1</span>:</span><br><span class="line">                res =<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'a'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span>:</span><br><span class="line">                    step = <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span> <span class="keyword">and</span> step == <span class="number">2</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span>:</span><br><span class="line">                    step = <span class="number">3</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span> <span class="keyword">and</span> step == <span class="number">3</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span>:</span><br><span class="line">                    step = <span class="number">4</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span> <span class="keyword">and</span> step == <span class="number">4</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span>:</span><br><span class="line">                    step = <span class="number">5</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span> <span class="keyword">and</span> step == <span class="number">5</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line">                output= <span class="built_in">max</span>(output,res)</span><br><span class="line">                 </span><br><span class="line">             </span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            output= <span class="built_in">max</span>(output,res)</span><br><span class="line">        <span class="keyword">if</span> output&lt;<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(1)$ </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣周赛" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="http://watermelondrip.github.io/2021/05/06/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://watermelondrip.github.io/2021/05/06/%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2021-05-05T20:19:00.000Z</published>
    <updated>2021-05-07T02:15:53.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>位运算<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E4%BD%8D%E8%BF%90%E7%AE%97.md#leetcode-%E9%A2%98%E8%A7%A3---%E4%BD%8D%E8%BF%90%E7%AE%97">刷题顺序</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><div class="table-container"><table><thead><tr><th>Operator</th><th style="text-align:center">Description</th><th style="text-align:right">Syntax</th></tr></thead><tbody><tr><td>&amp;</td><td style="text-align:center">AND</td><td style="text-align:right">x&amp;y</td></tr><tr><td>‘$</td><td style="text-align:center">$’</td><td style="text-align:right">OR</td><td>x’$</td><td>$’y</td></tr><tr><td>~</td><td style="text-align:center">NOT</td><td style="text-align:right">~x</td></tr><tr><td>&gt;&gt;</td><td style="text-align:center">right shift</td><td style="text-align:right">x&gt;&gt;</td></tr><tr><td>&lt;&lt;</td><td style="text-align:center">left shift</td><td style="text-align:right">x&lt;&lt;</td></tr></tbody></table></div><ul><li>Bitwise AND operator: Returns 1 if both the bits are 1 else 0.<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 10 = 1010 (Binary)</span><br><span class="line">b = 4 =  0100 (Binary</span><br><span class="line">a &amp; b = 1010</span><br><span class="line">         &amp;</span><br><span class="line">        0100</span><br><span class="line">      = 0000</span><br><span class="line">      = 0 (Decimal)</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li>Bitwise or operator: Returns 1 if either of the bit is 1 else 0.</li></ul><p>Example:<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 10 = 1010 (Binary)</span><br><span class="line">b = 4 =  0100 (Binary</span><br><span class="line"></span><br><span class="line">a | b = 1010</span><br><span class="line">         |</span><br><span class="line">        0100</span><br><span class="line">      = 1110</span><br><span class="line">      = 14 (Decimal)</span><br></pre></td></tr></tbody></table></figure><p></p><ul><li><p>Bitwise not operator: Returns one’s compliement of the number.<br>Example:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 10 = 1010 (Binary)</span><br><span class="line"></span><br><span class="line">~a = ~1010</span><br><span class="line">   = -(1010 + 1)</span><br><span class="line">   = -(1011)</span><br><span class="line">   = -11 (Decimal)</span><br></pre></td></tr></tbody></table></figure></li><li><p>Bitwise xor operator: Returns 1 if one of the bit is 1 and other is 0 else returns false.<br>Example:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 10 = 1010 (Binary)</span><br><span class="line">b = 4 =  0100 (Binary</span><br><span class="line"></span><br><span class="line">a &amp; b = 1010</span><br><span class="line">         ^</span><br><span class="line">        0100</span><br><span class="line">      = 1110</span><br><span class="line">      = 14 (Decimal)</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li>Python3 Code:</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python program to show</span></span><br><span class="line"><span class="comment"># bitwise operators</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Print bitwise AND operation</span></span><br><span class="line">print(<span class="string">"a &amp; b ="</span>, a &amp; b)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Print bitwise OR operation</span></span><br><span class="line">print(<span class="string">"a | b ="</span>, a | b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print bitwise NOT operation</span></span><br><span class="line">print(<span class="string">"~a ="</span>, ~a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print bitwise XOR operation</span></span><br><span class="line">print(<span class="string">"a ^ b ="</span>, a ^ b)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Output:<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &amp; b = <span class="number">0</span></span><br><span class="line">a | b = <span class="number">14</span></span><br><span class="line">~a = -<span class="number">11</span></span><br><span class="line">a ^ b = <span class="number">14</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>Shift Operators<br>These operators are used to shift the bits of a number left or right thereby multiplying or dividing the number by two respectively. They can be used when we have to multiply or divide a number by two. </p><ul><li>Bitwise right shift: Shifts the bits of the number to the right and fills 0 on voids left as a result. Similar effect as of dividing the number with some power of two.</li></ul><p>Example:<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">a &gt;&gt; 1 = 5 </span><br><span class="line"></span><br><span class="line">a = -10 </span><br><span class="line">a &gt;&gt; 1 = -5</span><br></pre></td></tr></tbody></table></figure><p></p><p>Bitwise left shift: Shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as of multiplying the number with some power of two.<br>Example: </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 5 = 0000 0101</span><br><span class="line">b = -10 = 1111 0110</span><br><span class="line"></span><br><span class="line">a &lt;&lt; 1 = 0000 1010 = 10</span><br><span class="line">a &lt;&lt; 2 = 0001 0100 = 20 </span><br><span class="line"></span><br><span class="line">b &lt;&lt; 1 = 0000 1010 = -20</span><br><span class="line">b &lt;&lt; 2 = 0001 0100 = -40 </span><br></pre></td></tr></tbody></table></figure><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p><a href="https://www.geeksforgeeks.org/python-bitwise-operators/">look</a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li><p>利用<code>x^1 = ~x</code>，可以将一个数的位级表示翻转。利用 x ^ x = 0 的特点，可以将三个数中重复的两个数去除，只留下另一个数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>^<span class="number">1</span>^<span class="number">2</span> = <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>只想保留最后一位</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0b101</span></span><br><span class="line">n = n&amp;<span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0b1</span></span><br><span class="line">n = <span class="number">0b10</span> </span><br><span class="line">n = n&amp;<span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">0b0</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="剑指Offer"><a href="#剑指Offer" class="headerlink" title="剑指Offer"></a>剑指Offer</h1><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  其中 nn 是链表的长度。需要遍历链表一次。</li><li>空间复杂度：<script type="math/tex">O(1)</script>。</li></ul></li></ul><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id="LC461-汉明距离-汉明距离"><a href="#LC461-汉明距离-汉明距离" class="headerlink" title="(LC461)  汉明距离  汉明距离"></a>(LC461)  汉明距离  <a href="https://leetcode-cn.com/problems/hamming-distance/">汉明距离</a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。</p><p>给出两个整数 x 和 y，计算它们之间的汉明距离。</p><p>注意：<br>0 ≤ x, y &lt; 231.<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: x = 1, y = 4</span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br><span class="line"></span><br><span class="line">上面的箭头指出了对应二进制位不同的位置。 </span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>对两个数进行异或操作，位级表示不同的那一位为 1，统计有多少个 1 即可。</li><li>使用 z&amp;(z-1) 去除 z 位级表示最低的那一位。</li><li>可以使用 Integer.bitcount() 来统计 1 个的个数。</li></ul><h4 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span>(<span class="params">self, x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        xor = x^y</span><br><span class="line">        distance = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> xor:</span><br><span class="line">            <span class="keyword">if</span> xor%<span class="number">2</span>:</span><br><span class="line">                distance+=<span class="number">1</span></span><br><span class="line">            xor = xor&gt;&gt;<span class="number">1</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> distance</span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC136-只出现一次的数字-只出现一次的数字"><a href="#LC136-只出现一次的数字-只出现一次的数字" class="headerlink" title="(LC136)  只出现一次的数字  只出现一次的数字"></a>(LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li>异或<h4 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            res = res^num</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-1"><a href="#大佬题解-1" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC268-268-丢失的数字-268-丢失的数字"><a href="#LC268-268-丢失的数字-268-丢失的数字" class="headerlink" title="(LC268)  268. 丢失的数字 268. 丢失的数字"></a>(LC268)  268. 丢失的数字 <a href="https://leetcode-cn.com/problems/missing-number/">268. 丢失的数字</a></h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给定一个包含 [0, n] 中 n 个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ul><li>异或<h4 id="Python3-Code-3"><a href="#Python3-Code-3" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        res = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            res = res^num^i</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-2"><a href="#大佬题解-2" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC260-260-只出现一次的数字-III-260-只出现一次的数字-III"><a href="#LC260-260-只出现一次的数字-III-260-只出现一次的数字-III" class="headerlink" title="(LC260)  260. 只出现一次的数字 III  260. 只出现一次的数字 III"></a>(LC260)  260. 只出现一次的数字 III  <a href="https://leetcode-cn.com/problems/single-number-iii/description/">260. 只出现一次的数字 III</a></h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,1,3,2,5]</span><br><span class="line">输出：[3,5]</span><br><span class="line">解释：[5, 3] 也是有效的答案。</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-4"><a href="#Python3-Code-4" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-3"><a href="#大佬题解-3" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC190-190-颠倒二进制位-190-颠倒二进制位"><a href="#LC190-190-颠倒二进制位-190-颠倒二进制位" class="headerlink" title="(LC190)  190. 颠倒二进制位  190. 颠倒二进制位"></a>(LC190)  190. 颠倒二进制位  <a href="https://leetcode-cn.com/problems/reverse-bits/description/">190. 颠倒二进制位</a></h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p>颠倒给定的 32 位无符号整数的二进制位。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: 00000010100101000001111010011100</span><br><span class="line">输出: 00111001011110000010100101000000</span><br><span class="line">解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，</span><br><span class="line">     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。 </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-5"><a href="#Python3-Code-5" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-4"><a href="#大佬题解-4" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC231-231-Power-of-Two-231-Power-of-Two"><a href="#LC231-231-Power-of-Two-231-Power-of-Two" class="headerlink" title="(LC231)  231. Power of Two  231. Power of Two"></a>(LC231)  231. Power of Two  <a href="https://leetcode-cn.com/problems/power-of-two/">231. Power of Two</a></h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 1</span><br><span class="line">输出: true</span><br><span class="line">解释: 20 = 1</span><br></pre></td></tr></tbody></table></figure><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-6"><a href="#Python3-Code-6" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;=<span class="number">0</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> n &gt;<span class="number">1</span>: </span><br><span class="line">            <span class="keyword">if</span> (n&amp;<span class="number">1</span>) == <span class="number">0</span>: <span class="comment"># 取最后一位，判断是不是0</span></span><br><span class="line">                n = n&gt;&gt;<span class="number">1</span></span><br><span class="line">               </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfFour</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; bool:</span> <span class="comment">#4的幂</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> n &gt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">3</span>) == <span class="number">0</span>:</span><br><span class="line">                n = n&gt;&gt;<span class="number">2</span></span><br><span class="line">                print(n)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-5"><a href="#大佬题解-5" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC693-693-交替位二进制数-693-交替位二进制数"><a href="#LC693-693-交替位二进制数-693-交替位二进制数" class="headerlink" title="(LC693)  693. 交替位二进制数  693. 交替位二进制数"></a>(LC693)  693. 交替位二进制数  <a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/description/">693. 交替位二进制数</a></h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p>给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：true</span><br><span class="line">解释：5 的二进制表示是：101</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-7"><a href="#Python3-Code-7" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasAlternatingBits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">        a = n ^(n&gt;&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> (a &amp;(a+<span class="number">1</span>)) == <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析 </li><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-6"><a href="#大佬题解-6" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC476-476-数字的补数-476-数字的补数"><a href="#LC476-476-数字的补数-476-数字的补数" class="headerlink" title="(LC476)  476. 数字的补数  476. 数字的补数"></a>(LC476)  476. 数字的补数  <a href="https://leetcode-cn.com/problems/number-complement/">476. 数字的补数</a></h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><p>给你一个 正 整数 num，输出它的补数。补数是对该数的二进制表示取反。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 5</span><br><span class="line">输出：2</span><br><span class="line">解释：5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出 2 。</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>对于 10000000 这样的数要扩展成 11111111，可以利用以下方法：</p><p>mask |= mask &gt;&gt; 1    11000000<br>mask |= mask &gt;&gt; 2    11110000<br>mask |= mask &gt;&gt; 4    11111111</p><h4 id="Python3-Code-8"><a href="#Python3-Code-8" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findComplement</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        tmp = num </span><br><span class="line">      </span><br><span class="line">        tmp = tmp | tmp&gt;&gt;<span class="number">1</span></span><br><span class="line">         </span><br><span class="line">        tmp = tmp | tmp&gt;&gt;<span class="number">2</span></span><br><span class="line">         </span><br><span class="line">        tmp = tmp | tmp&gt;&gt;<span class="number">4</span></span><br><span class="line">        </span><br><span class="line">        tmp = tmp | tmp&gt;&gt;<span class="number">8</span></span><br><span class="line">         </span><br><span class="line">        tmp = tmp | tmp&gt;&gt;<span class="number">16</span></span><br><span class="line">      </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> tmp^num  </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-7"><a href="#大佬题解-7" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC136-只出现一次的数字-只出现一次的数字-1"><a href="#LC136-只出现一次的数字-只出现一次的数字-1" class="headerlink" title="(LC136)  只出现一次的数字  只出现一次的数字"></a>(LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-9"><a href="#Python3-Code-9" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-8"><a href="#大佬题解-8" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC136-只出现一次的数字-只出现一次的数字-2"><a href="#LC136-只出现一次的数字-只出现一次的数字-2" class="headerlink" title="(LC136)  只出现一次的数字  只出现一次的数字"></a>(LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h2><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-10"><a href="#Python3-Code-10" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-9"><a href="#大佬题解-9" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC136-只出现一次的数字-只出现一次的数字-3"><a href="#LC136-只出现一次的数字-只出现一次的数字-3" class="headerlink" title="(LC136)  只出现一次的数字  只出现一次的数字"></a>(LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h2><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-11"><a href="#Python3-Code-11" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-LC136-只出现一次的数字-只出现一次的数字"><a href="#大佬题解-LC136-只出现一次的数字-只出现一次的数字" class="headerlink" title="大佬题解##  (LC136)  只出现一次的数字  只出现一次的数字"></a>大佬题解##  (LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h4><h3 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-12"><a href="#Python3-Code-12" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-LC136-只出现一次的数字-只出现一次的数字-1"><a href="#大佬题解-LC136-只出现一次的数字-只出现一次的数字-1" class="headerlink" title="大佬题解##  (LC136)  只出现一次的数字  只出现一次的数字"></a>大佬题解##  (LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h4><h3 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-13"><a href="#Python3-Code-13" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-LC136-只出现一次的数字-只出现一次的数字-2"><a href="#大佬题解-LC136-只出现一次的数字-只出现一次的数字-2" class="headerlink" title="大佬题解##  (LC136)  只出现一次的数字  只出现一次的数字"></a>大佬题解##  (LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h4><h3 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-14"><a href="#Python3-Code-14" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-LC136-只出现一次的数字-只出现一次的数字-3"><a href="#大佬题解-LC136-只出现一次的数字-只出现一次的数字-3" class="headerlink" title="大佬题解##  (LC136)  只出现一次的数字  只出现一次的数字"></a>大佬题解##  (LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h4><h3 id="题目-15"><a href="#题目-15" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-15"><a href="#Python3-Code-15" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-LC136-只出现一次的数字-只出现一次的数字-4"><a href="#大佬题解-LC136-只出现一次的数字-只出现一次的数字-4" class="headerlink" title="大佬题解##  (LC136)  只出现一次的数字  只出现一次的数字"></a>大佬题解##  (LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h4><h3 id="题目-16"><a href="#题目-16" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-16"><a href="#Python3-Code-16" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-LC136-只出现一次的数字-只出现一次的数字-5"><a href="#大佬题解-LC136-只出现一次的数字-只出现一次的数字-5" class="headerlink" title="大佬题解##  (LC136)  只出现一次的数字  只出现一次的数字"></a>大佬题解##  (LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h4><h3 id="题目-17"><a href="#题目-17" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-17"><a href="#Python3-Code-17" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-10"><a href="#大佬题解-10" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC136-只出现一次的数字-只出现一次的数字-4"><a href="#LC136-只出现一次的数字-只出现一次的数字-4" class="headerlink" title="(LC136)  只出现一次的数字  只出现一次的数字"></a>(LC136)  只出现一次的数字  <a href="https://leetcode-cn.com/problems/single-number/description/">只出现一次的数字</a></h2><h3 id="题目-18"><a href="#题目-18" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-18"><a href="#Python3-Code-18" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><pre><code>- 复杂度分析 </code></pre><ul><li>时间复杂度：$O(1)$,  在 Python 和 Java 中 Integer 的大小是固定的，处理时间也是固定的。 32 位整数需要 32 次迭代。</li><li>空间复杂度：$O(1)$,  使用恒定大小的空间。 </li></ul><h4 id="大佬题解-11"><a href="#大佬题解-11" class="headerlink" title="大佬题解"></a>大佬题解</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据类型" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣算法" scheme="http://watermelondrip.github.io/tags/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数学</title>
    <link href="http://watermelondrip.github.io/2021/05/06/%E6%95%B0%E5%AD%A6/"/>
    <id>http://watermelondrip.github.io/2021/05/06/%E6%95%B0%E5%AD%A6/</id>
    <published>2021-05-05T14:00:00.000Z</published>
    <updated>2021-05-06T08:44:57.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常见运算"><a href="#常见运算" class="headerlink" title="常见运算"></a>常见运算</h1><h2 id="素数分解"><a href="#素数分解" class="headerlink" title="素数分解"></a>素数分解</h2><p>每一个数都可以分解成素数的乘积，例如 <script type="math/tex">84 = 2^2 * 3^1 * 5^0 * 7^1 * 11^0 * 13^0 * 17^0 * ...</script></p><h2 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h2><p>令 <script type="math/tex">x = 2^{m0} * 3^{m1} * 5^{m2} * 7^{m3} * 11^{m4 }* …</script></p><p>令 <script type="math/tex">y = 2^{n0} * 3^{n1} * 5^{n2} * 7^{n3} * 11^{n4} * …</script></p><p>如果 x  整除 y（y mod x == 0），则对于所有 i，mi &lt;= ni。</p><h2 id="最大公约数最小公倍数"><a href="#最大公约数最小公倍数" class="headerlink" title="最大公约数最小公倍数"></a>最大公约数最小公倍数</h2><p>x 和 y 的最大公约数为：<script type="math/tex">gcd(x,y) = 2^{min(m0,n0)} * 3^{min(m1,n1)} * 5^{min(m2,n2)} * ...</script></p><p>x 和 y 的最小公倍数为：<script type="math/tex">lcm(x,y) = 2^{max(m0,n0)} * 3^{max(m1,n1)} * 5^{max(m2,n2)} * ...</script></p><h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="LC204-204-计数质数-计数质数"><a href="#LC204-204-计数质数-计数质数" class="headerlink" title="(LC204 ) 204. 计数质数  计数质数"></a>(LC204 ) 204. 计数质数  <a href="https://leetcode-cn.com/problems/count-primes/">计数质数</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>统计所有小于非负整数 n 的质数的数量。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 10</span><br><span class="line">输出：4</span><br><span class="line">解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>埃拉托斯特尼筛法在每次找到一个素数时，将能被素数整除的数排除掉。<br>我们考虑这样一个事实：如果 xx 是质数，那么大于 xx 的 xx 的倍数 2x,3x,\ldots2x,3x,… 一定不是质数，因此我们可以从这里入手。<br>我们设 <code>[i]isPrime[i]</code>表示数 <code>i</code> 是不是质数，如果是质数则为 1，否则为  0。从小到大遍历每个数，如果这个数为质数，则将其所有的倍数都标记为合数（除了该质数本身），即  0，这样在运行结束的时候我们即能知道质数的个数。 </p><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        notPrimes = [<span class="literal">False</span>]*(n+<span class="number">1</span>)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">            <span class="keyword">if</span> notPrimes[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i**<span class="number">2</span>,n,i):</span><br><span class="line">                notPrimes[j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(nlogn)</script> 双层迭代 </li><li>空间复杂度：<script type="math/tex">O(n)</script> </li></ul></li></ul><h2 id="LC1819-序列中不同最大公约数的数目-序列中不同最大公约数的数目"><a href="#LC1819-序列中不同最大公约数的数目-序列中不同最大公约数的数目" class="headerlink" title="(LC1819 )  序列中不同最大公约数的数目 序列中不同最大公约数的数目"></a>(LC1819 )  序列中不同最大公约数的数目 <a href="https://leetcode-cn.com/problems/number-of-different-subsequences-gcds/">序列中不同最大公约数的数目</a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个由正整数组成的数组 <code>nums</code> 。<br>数字序列的 最大公约数 定义为序列中所有整数的共有约数中的最大整数。<br>例如，序列 [4,6,16] 的最大公约数是 2 。<br>数组的一个 子序列 本质是一个序列，可以通过删除数组中的某些元素（或者不删除）得到。<br>例如，[2,5,10] 是 [1,2,1,2,4,1,5,10] 的一个子序列。<br>计算并返回 nums 的所有 非空 子序列中 不同 最大公约数的 数目 。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>动态规划</li></ul><h4 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n^2)</script> 双层迭代 </li><li>空间复杂度：<script type="math/tex">O((n+1)*(n+1))</script> </li></ul></li></ul><h5 id="大佬"><a href="#大佬" class="headerlink" title="大佬"></a>大佬</h5><h3 id="LC"><a href="#LC" class="headerlink" title="(LC )    "></a>(LC )   <a href=""> </a></h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><ul><li>动态规划</li></ul><h4 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><h5 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n^2)</script> 双层迭代 </li><li>空间复杂度：<script type="math/tex">O((n+1)*(n+1))</script> </li></ul></li></ul><h5 id="大佬-1"><a href="#大佬-1" class="headerlink" title="大佬"></a>大佬</h5><h3 id="LC-1"><a href="#LC-1" class="headerlink" title="(LC )    "></a>(LC )   <a href=""> </a></h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ul><li>动态规划</li></ul><h4 id="Python3-Code-3"><a href="#Python3-Code-3" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><h5 id="动态规划-2"><a href="#动态规划-2" class="headerlink" title="动态规划"></a>动态规划</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n^2)</script> 双层迭代 </li><li>空间复杂度：<script type="math/tex">O((n+1)*(n+1))</script> </li></ul></li></ul><h5 id="大佬-2"><a href="#大佬-2" class="headerlink" title="大佬"></a>大佬</h5><h3 id="LC-2"><a href="#LC-2" class="headerlink" title="(LC )    "></a>(LC )   <a href=""> </a></h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><ul><li>动态规划</li></ul><h4 id="Python3-Code-4"><a href="#Python3-Code-4" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><h5 id="动态规划-3"><a href="#动态规划-3" class="headerlink" title="动态规划"></a>动态规划</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n^2)</script> 双层迭代 </li><li>空间复杂度：<script type="math/tex">O((n+1)*(n+1))</script> </li></ul></li></ul><h5 id="大佬-3"><a href="#大佬-3" class="headerlink" title="大佬"></a>大佬</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣算法" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python小教程</title>
    <link href="http://watermelondrip.github.io/2021/05/05/Python%E5%B0%8F%E6%95%99%E7%A8%8B%20(5)/"/>
    <id>http://watermelondrip.github.io/2021/05/05/Python%E5%B0%8F%E6%95%99%E7%A8%8B%20(5)/</id>
    <published>2021-05-05T06:16:20.783Z</published>
    <updated>2021-05-25T09:06:27.956Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-Introduction"><a href="#Python-Introduction" class="headerlink" title="Python Introduction"></a>Python Introduction</h1><h2 id="Python-Keywords-关键词"><a href="#Python-Keywords-关键词" class="headerlink" title="Python Keywords(关键词)"></a>Python Keywords(关键词)</h2><p>关键词是指在Python中，保留的单词。我们不可以把关键词当作变量名variable name, 函数名，或者是其他标识符。关键词除了<code>True</code>，<code>False</code>，<code>None</code>，其他都是小写的。here is the complete <a href="https://www.programiz.com/python-programming/keyword-list">list of all the keywords</a> with examples</p><h2 id="Python-标识符"><a href="#Python-标识符" class="headerlink" title="Python 标识符"></a>Python 标识符</h2><p>标识符是一个名字，可以用来区别不同的<code>class</code>，<code>functions</code>，<code>variables</code></p><h3 id="标识符规则"><a href="#标识符规则" class="headerlink" title="标识符规则"></a>标识符规则</h3><ul><li>可以由各种小写字母或者数字表示或者是下划线<code>_</code>，比如名字为<code>MyDest</code>,<code>v_1</code></li><li>不能由数字开头</li><li>关键词不能做标识符，比如：<code>global = 1</code>是不运行的，如果执行会报错<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">"&lt;interactive input&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> = <span class="number">1</span></span><br><span class="line">           ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></tbody></table></figure></li><li>不能用特殊符号比如<code>!,@</code>等。比如运行<code>a@ = 0</code>,会报错<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">"&lt;interactive input&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    a@ = <span class="number">0</span></span><br><span class="line">     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></tbody></table></figure></li><li>标识符长度不限</li></ul><h3 id="Things-to-Remember"><a href="#Things-to-Remember" class="headerlink" title="Things to Remember"></a>Things to Remember</h3><p>python 是一个区分大小写（case-sensitive）语言。</p><h2 id="Python-Statement-语句-Indentation-缩进-and-Comments-注释"><a href="#Python-Statement-语句-Indentation-缩进-and-Comments-注释" class="headerlink" title="Python  Statement(语句), Indentation(缩进) and Comments(注释)"></a>Python  Statement(语句), Indentation(缩进) and Comments(注释)</h2><h3 id="Python-Statement-语句"><a href="#Python-Statement-语句" class="headerlink" title="Python  Statement(语句)"></a>Python  Statement(语句)</h3><p>Python 的运行需要执行语句。例如，<code>a = 1</code>是一个赋值语句。<code>if</code>语句等等。</p><h4 id="Multi-line-statement-多行语句"><a href="#Multi-line-statement-多行语句" class="headerlink" title="Multi-line statement 多行语句"></a>Multi-line statement 多行语句</h4><p>在Python中，我们可以用 行继续符（line continuation charater）<code>\</code>来把一个长的语句，变成多行语句来方便阅读。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + \</span><br><span class="line">    <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span> + \</span><br><span class="line">    <span class="number">7</span> + <span class="number">8</span> + <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><br>这是一个明确的行继续符。 在Python里，行继续符直接应用在 parentheses ( ), brackets [ ], and braces { }里。例如<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> +</span><br><span class="line">    <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span> +</span><br><span class="line">    <span class="number">7</span> + <span class="number">8</span> + <span class="number">9</span>)</span><br><span class="line">colors = [<span class="string">'red'</span>,</span><br><span class="line">          <span class="string">'blue'</span>,</span><br><span class="line">          <span class="string">'green'</span>]</span><br></pre></td></tr></tbody></table></figure><br>我们也可以用semicolons分号区别多个语句。例如<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>; b = <span class="number">2</span>; c = <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Python-Indentation-缩进"><a href="#Python-Indentation-缩进" class="headerlink" title="Python  Indentation(缩进)"></a>Python  Indentation(缩进)</h3><p>Python美好的地方就是用缩进。<br>一个程序块开始于缩进，结束于第一个取消缩进的那行。一般用四个whitespaces用作缩进。为了可读性，不支持把缩进取消，比如：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>: print(<span class="string">'Hello'</span>); a = <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><br>上面这个代码块可读性就比较差，如果换成下面的code，可读性就高了<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'Hello'</span>)</span><br><span class="line">    a = <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><br>所以莫装逼哟！<p></p><h3 id="Python-Comments-注释"><a href="#Python-Comments-注释" class="headerlink" title="Python  Comments(注释)"></a>Python  Comments(注释)</h3><p>注释在写程序的过程中是非常重要的。注释可以描述在这段程序在做一个什么事，可以帮助别人在看这段源代码的时候，就不那么头疼和想吐了。<br>在写程序的时候，其实很有可能会忘记一些很关键的步骤和细节。所以花些时间来写这些注释绝对是有意义的。<br>Python中，我们用hash(#)符号来写注释部分。比如<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#This is a comment</span></span><br><span class="line"><span class="comment">#print out Hello</span></span><br><span class="line">print(<span class="string">'Hello'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Multi-line-comments-多行注释"><a href="#Multi-line-comments-多行注释" class="headerlink" title="Multi-line comments(多行注释)"></a>Multi-line comments(多行注释)</h4><p>python 中除了刚刚提到的用hash#注释之外，也可以用<code>``和</code>“””`。<br>比如<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""This is also a</span></span><br><span class="line"><span class="string">perfect example of</span></span><br><span class="line"><span class="string">multi-line comments"""</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Docstrings-文档字符串"><a href="#Docstrings-文档字符串" class="headerlink" title="Docstrings (文档字符串)"></a>Docstrings (文档字符串)</h4><p>Docstrings 是 documentation string 的缩写，意思是文档字符串。<br>Python的文档字符串是一行字符串在定义一个函数，方法，类或者模型后面。Triple quotes用于写文档字符串。<br>比如<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">"""Function to double the value"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*num</span><br></pre></td></tr></tbody></table></figure><br>The docstrings are associated with the object as their <strong>doc</strong> attribute.<p></p><p>我们可以读取函数的docstrings<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">"""Function to double the value"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*num</span><br><span class="line">print(double.__doc__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Function to double the value</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="Python-Variables-变量-Constants-常熟-and-Literals-关键词"><a href="#Python-Variables-变量-Constants-常熟-and-Literals-关键词" class="headerlink" title="Python Variables(变量), Constants(常熟) and Literals (关键词)"></a>Python Variables(变量), Constants(常熟) and Literals (关键词)</h2><h3 id="Python-Variables-变量"><a href="#Python-Variables-变量" class="headerlink" title="Python Variables(变量)"></a>Python Variables(变量)</h3><p>一个变量（Variable）其实是一个被命名的地址，这个地址用来在存储器里来存储数据的。也可以理解成，变量是一个容器，这个容器可以装着数据data，在程序里，这个容器可以进行改变。<br>例如<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><br>我们创建了一个新的变量叫做<code>number</code>。我们把<code>10</code>这个数值assign to the variable(分配给了这个变量)。<br>我们也可以这么想，变量是一个大书包，这个书包里可以放很多的书，同时这些书也可以随时被其他的书替代。<br>例如：<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">10</span></span><br><span class="line">number = <span class="number">1.1</span></span><br></pre></td></tr></tbody></table></figure><br>我们初始<code>number</code>的值是<code>10</code>。过了一瞬间，就一会会儿，他就变成了<code>1.1</code>了。<br><strong>Note: 其实python里， 严格的说，我们实际上不是把value（数值）赋给了变量。其实是Python gives the reference of the object(value) to the variable。（这个我们后面再解释</strong><p></p><h4 id="Assigning-values-to-Variables-分配数值给变量"><a href="#Assigning-values-to-Variables-分配数值给变量" class="headerlink" title="Assigning values to Variables (分配数值给变量)"></a>Assigning values to Variables (分配数值给变量)</h4><p>我觉得中文里很难找到一个合适的词来描述assign这个动作，所有后面我有时候会写assign，而不翻译成英文了。</p><p>用上面的例子看到了我们可以用assginment操作<code>=</code>来assign一个数组给变量。</p><ul><li><p>Example 1: Declaring and assigning value to a variable</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">website = <span class="string">"apple.com"</span></span><br><span class="line">print(website)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apple.com</span><br></pre></td></tr></tbody></table></figure><p>在上面的程序里，我们可以把值<code>apple.com</code>分配给变量<code>website</code>。 然后我们打印出这个变量，这个被分配了<code>apple.com</code>的变量，<code>apple.com</code>。<br><strong>Note:  Python是一个type-inferred语言（隐式类型），所以我们不需要明确的定义出变量的类型。比如例子中，python 自动的就可以知道<code>apple.com</code>是字符串，然后接下来，声明变量<code>website</code>为字符串 </strong></p></li><li><p>Example 2: Changing the value of a variable</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">website = <span class="string">"apple.com"</span></span><br><span class="line">print(website)</span><br><span class="line"></span><br><span class="line"><span class="comment"># assigning a new value to website</span></span><br><span class="line">website = <span class="string">"programiz.com"</span></span><br><span class="line"></span><br><span class="line">print(website)</span><br><span class="line">&gt;&gt;&gt;apple.com</span><br><span class="line">&gt;&gt;&gt;programiz.com</span><br></pre></td></tr></tbody></table></figure><p>在上面的程序里，我们把初始值<code>apple.com</code>分配给变量<code>website</code>。 然后 这个变量又被改成了<code>programiz.com</code>。</p></li><li><p>Example 3: Assigning multiple values to multiple variables</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">5</span>, <span class="number">3.2</span>, <span class="string">"Hello"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (c)</span><br></pre></td></tr></tbody></table></figure><h3 id="Python-Constan-常量"><a href="#Python-Constan-常量" class="headerlink" title="Python Constan(常量)"></a>Python Constan(常量)</h3><p>Constant是一种变量，这种变量的值是不可变的。是不是很绕哈哈哈，所以说这时候，把变量这个概念理解成容器是很方便的，就是说constant是一种耿直的容器哈哈哈。也就是说，constant 是一个容器，这个容器里面保存的这些信息，是不可以改变的。<br>我们同时也可以把constant理解成一个书包，里面同样也放了很多的书，但是这些书可是被替换不了的，一次也不可以的！</p></li></ul><h4 id="Assigning-value-to-constant-in-Python"><a href="#Assigning-value-to-constant-in-Python" class="headerlink" title="Assigning value to constant in Python"></a>Assigning value to constant in Python</h4><p>在Python里，constants常常用来被declared(声明)和assgined(分配)在一个module(模块)里。module（模块。Module是一个新的文件，这个文件包括 variables, functions, etc。Module 可以被导入到主文件里。在module 里，常量一般用大写字母表示，同时用下划线把词和词直接分隔开。</p><ul><li>Example 3: Declaring and assigning value to a constant<br>(1） Create a constant.py:<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.14</span></span><br><span class="line">GRAVITY = <span class="number">9.8</span></span><br></pre></td></tr></tbody></table></figure>(2） Create a main.py:<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> constant</span><br><span class="line">print(constant.PI)</span><br><span class="line">print(constant.GRAVITY)</span><br></pre></td></tr></tbody></table></figure>（3）Output:<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">9.8</span></span><br></pre></td></tr></tbody></table></figure>在上面的程序里，我们创建了一个<code>constant.py</code>模块文件。然后我们分配给常量值<code>3.14</code>，<code>9.8</code>给常量<code>PI</code>和<code>GRAVITY</code>。然后我们由创建了主文件<code>main.py</code>，导入<code>constant</code>模块。最后打印常数值。</li></ul><h3 id="Rules-and-Naming-Convention-for-Variables-and-constants-（命名规范）"><a href="#Rules-and-Naming-Convention-for-Variables-and-constants-（命名规范）" class="headerlink" title="Rules and Naming Convention for Variables and constants （命名规范）"></a>Rules and Naming Convention for Variables and constants （命名规范）</h3><ul><li>常量变量名应该是由大写小写和下划线组成<code>snake_caseMACRO_CASEcamelCaseCapWords</code></li><li>命名的名字要意义，比如，<code>vowel</code>比<code>v</code>在程序中更容易理解</li><li>如果你想创建一个变量名字由两个单词组成，两个单词中间需要用下划线分开<code>my_name</code></li><li>通常用大写字母来declare常量constant，比如<code>PI</code>,<code>G</code></li><li>不要用特殊符号@#￥，也不要用数字来开头</li></ul><h2 id="Literals-（这个真的不知道怎么翻译-后面慢慢想吧）"><a href="#Literals-（这个真的不知道怎么翻译-后面慢慢想吧）" class="headerlink" title="Literals （这个真的不知道怎么翻译,后面慢慢想吧）"></a>Literals （这个真的不知道怎么翻译,后面慢慢想吧）</h2><p>Literal是给定变量和常量的原始数据。在Python里由很多中种不同的不同的literals:</p><h3 id="Numeric-Literals"><a href="#Numeric-Literals" class="headerlink" title="Numeric Literals"></a>Numeric Literals</h3><p>Numeric Literals是不可变的（immutable）。Numeric Literals可以包含三种类型：<code>Integer</code>，<code>Float</code>，<code>Complex</code>。</p><ul><li>Example 4: How to use Numeric literals in Python?<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0b1010</span> <span class="comment">#Binary Literals</span></span><br><span class="line">b = <span class="number">100</span> <span class="comment">#Decimal Literal </span></span><br><span class="line">c = <span class="number">0o310</span> <span class="comment">#Octal Literal</span></span><br><span class="line">d = <span class="number">0x12c</span> <span class="comment">#Hexadecimal Literal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Float Literal</span></span><br><span class="line">float_1 = <span class="number">10.5</span> </span><br><span class="line">float_2 = <span class="number">1.5e2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Complex Literal </span></span><br><span class="line">x = <span class="number">3.14j</span></span><br><span class="line"></span><br><span class="line">print(a, b, c, d)</span><br><span class="line">print(float_1, float_2)</span><br><span class="line">print(x, x.imag, x.real)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> <span class="number">100</span> <span class="number">200</span> <span class="number">300</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10.5</span> <span class="number">150.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3.14j</span> <span class="number">3.14</span> <span class="number">0.0</span></span><br></pre></td></tr></tbody></table></figure>在上面的程序里<br>（1) We assigned integer literals into different variables.<code>a</code>是一个二进制literal。<code>b</code>是个十进制literal。<code>c</code>是个八进制literal。<code>d</code>是个十六进制literal。<br>(2) 当我们print变量时，所有的Literals被转换成了十进制值。<br>（3） <code>10.5</code>和<code>1.5e2</code>是浮点literals。</li></ul><h3 id="String-Literals"><a href="#String-Literals" class="headerlink" title="String Literals"></a>String Literals</h3><p>String Literal是一连串的characters(字符)用引号引起来。我们用单双三引号。</p><ul><li>Example 7: How to use string literals in Python?<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">strings = <span class="string">"This is Python"</span></span><br><span class="line">char = <span class="string">"C"</span></span><br><span class="line">multiline_str = <span class="string">"""This is a multiline string with more than one line code."""</span></span><br><span class="line">unicode = <span class="string">u"\u00dcnic\u00f6de"</span></span><br><span class="line">raw_str = <span class="string">r"raw \n string"</span></span><br><span class="line"></span><br><span class="line">print(strings)</span><br><span class="line">print(char)</span><br><span class="line">print(multiline_str)</span><br><span class="line">print(unicode)</span><br><span class="line">print(raw_str)</span><br></pre></td></tr></tbody></table></figure>Output:<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> Python</span><br><span class="line">C</span><br><span class="line">This <span class="keyword">is</span> a multiline string <span class="keyword">with</span> more than one line code.</span><br><span class="line">Ünicöde</span><br><span class="line">raw \n string</span><br></pre></td></tr></tbody></table></figure>在上面的程序中，<code>This is Python</code>是一个string literal <code>C</code>是一个character literal。<br>在三引号的里的值<code>"""This is a multiline string with more than one line code."""</code>被配置给了<code>multiline_str</code>，是一个multi-line string literal。<br>字符串（String）<code>u"\u00dcnic\u00f6de"</code>是一个unicode literal，支持字符，而不是英文。这里面<code>\u00dc</code> 表示 <code>Ü</code> and <code>\u00f6</code>表示 <code>ö</code>。</li></ul><p><code>r"raw \n string"</code>中的<code>r</code>使得字符串是个raw string literal，忽略了中间的一些特殊符号</p><h3 id="Boolean-Literals"><a href="#Boolean-Literals" class="headerlink" title="Boolean Literals"></a>Boolean Literals</h3><p>Boolean Literals就两种值<code>True</code>或<code>False</code>。</p><ul><li>Example 8: How to use boolean literals in Python?<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="number">1</span> == <span class="literal">True</span>)</span><br><span class="line">y = (<span class="number">1</span> == <span class="literal">False</span>)</span><br><span class="line">a = <span class="literal">True</span> + <span class="number">4</span></span><br><span class="line">b = <span class="literal">False</span> + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"x is"</span>, x)</span><br><span class="line">print(<span class="string">"y is"</span>, y)</span><br><span class="line">print(<span class="string">"a:"</span>, a)</span><br><span class="line">print(<span class="string">"b:"</span>, b)</span><br></pre></td></tr></tbody></table></figure>Output:<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line">y <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line">a: <span class="number">5</span></span><br><span class="line">b: <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure>在上面的程序里，我们用boolean literal<code>True</code>和<code>False</code>。<code>True</code>用<code>1</code>来表示它的值，<code>False</code>用<code>0</code>来表示它的值。<code>x</code>的值是<code>True</code>是因为<code>1</code>等于<code>True</code>。<code>y</code>的值是<code>False</code>是因为<code>1</code>不等于<code>False</code>。<code>a</code>的值是<code>5</code>因为加了<code>True</code>,因此加了一个<code>1</code>在<code>4</code>。<code>b</code>的值是<code>10</code>因为加了<code>False</code>,因此加了一个<code>0</code>在<code>10</code>。</li></ul><h3 id="Special-Literals"><a href="#Special-Literals" class="headerlink" title="Special Literals"></a>Special Literals</h3><p>Python 只有一个特殊Literal，是<code>None</code>。我们用它来表示空。</p><h3 id="Literal-集合"><a href="#Literal-集合" class="headerlink" title="Literal 集合"></a>Literal 集合</h3><p>四种不同的literal集合，List literals, Tuple literals, Dict literals, , Set literals。</p><ul><li>Example 10: How to use literals collections in Python?<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">"apple"</span>, <span class="string">"mango"</span>, <span class="string">"orange"</span>] <span class="comment">#list</span></span><br><span class="line">numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">#tuple</span></span><br><span class="line">alphabets = {<span class="string">'a'</span>:<span class="string">'apple'</span>, <span class="string">'b'</span>:<span class="string">'ball'</span>, <span class="string">'c'</span>:<span class="string">'cat'</span>} <span class="comment">#dictionary</span></span><br><span class="line">vowels = {<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span> , <span class="string">'o'</span>, <span class="string">'u'</span>} <span class="comment">#set</span></span><br><span class="line"></span><br><span class="line">print(fruits)</span><br><span class="line">print(numbers)</span><br><span class="line">print(alphabets)</span><br><span class="line">print(vowels)</span><br></pre></td></tr></tbody></table></figure>Output:<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'orange'</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">{<span class="string">'a'</span>: <span class="string">'apple'</span>, <span class="string">'b'</span>: <span class="string">'ball'</span>, <span class="string">'c'</span>: <span class="string">'cat'</span>}</span><br><span class="line">{<span class="string">'e'</span>, <span class="string">'a'</span>, <span class="string">'o'</span>, <span class="string">'i'</span>, <span class="string">'u'</span>}</span><br></pre></td></tr></tbody></table></figure>在上面的程序里，我们创建了一个列表（有的也叫序列，英文名都一个叫List)，一个元组tuple,一个字典dictionary，一个集合set（集合（set）是一个无序的不重复元素序列）。 </li></ul><h2 id="Python-数据类型"><a href="#Python-数据类型" class="headerlink" title="Python 数据类型"></a>Python 数据类型</h2><h3 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h3><p>Python 中，每个值都有一个数据类型。因为在每一个object(对象)，数据类型实际是类和变量的例子。</p><h3 id="Python-Numbers数字"><a href="#Python-Numbers数字" class="headerlink" title="Python Numbers数字"></a>Python Numbers数字</h3><p>整型，浮点数，复数，是PYthon 的数字类型。被定义为<code>int</code>，<code>float</code>，<code>complex</code>类。<br>我们用<code>type()</code>函数来分别变量或者值属于哪一类。其中<code>isinstance()</code>function 是用来确认这个对象object 是否是属于某一种特殊的类。比如：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">print(a, <span class="string">"is of type"</span>, <span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line">a = <span class="number">2.0</span></span><br><span class="line">print(a, <span class="string">"is of type"</span>, <span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span>+<span class="number">2j</span></span><br><span class="line">print(a, <span class="string">"is complex number?"</span>, <span class="built_in">isinstance</span>(<span class="number">1</span>+<span class="number">2j</span>,<span class="built_in">complex</span>))</span><br></pre></td></tr></tbody></table></figure><br>Output:<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="keyword">is</span> of <span class="built_in">type</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">2.0 <span class="title">is</span> <span class="title">of</span> <span class="title">type</span> &lt;<span class="title">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class">(<span class="params"><span class="number">1</span>+<span class="number">2j</span></span>) <span class="title">is</span> <span class="title">complex</span> <span class="title">number</span>? <span class="title">True</span></span></span><br></pre></td></tr></tbody></table></figure><br>整型可以是任何长度，只要是存储Memory允许。<br>一个浮点数的精度可以到小数点后15位。整数和浮点数通过是否存在小数点区分开。<code>1</code>是整数，<code>1.0</code>是浮点数。<br>复数的形式是<code>x+yj</code>,其中<code>x</code>是实数部分，<code>y</code>是虚数部分。<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1234567890123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1234567890123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">0.1234567890123456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">0.12345678901234568</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">1</span>+<span class="number">2j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br></pre></td></tr></tbody></table></figure><br>需要注意的是，<code>float</code>变量<code>b</code>被截短了。<p></p><h3 id="Python-List-列表"><a href="#Python-List-列表" class="headerlink" title="Python List(列表)"></a>Python List(列表)</h3><p>列表(List)是一有序序列。是Python 里最常用的数据结构，而且很灵活。列表里的所有项不需要是相同的数据类型。<br>表示一个列表是很直接的。 列表的每一项(item)通过都好区分开，同时被<code>[]</code>框框起来。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2.2</span>, <span class="string">'python'</span>]</span><br></pre></td></tr></tbody></table></figure><br>我们可以用切片操作符slicing operator<code>[]</code>来提取一项或者一串。Python 里，列表的序号是从<code>0</code>开始取的。<p></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>,<span class="number">35</span>,<span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># a[2] = 15</span></span><br><span class="line">print(<span class="string">"a[2] = "</span>, a[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># a[0:3] = [5, 10, 15]</span></span><br><span class="line">print(<span class="string">"a[0:3] = "</span>, a[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># a[5:] = [30, 35, 40]</span></span><br><span class="line">print(<span class="string">"a[5:] = "</span>, a[<span class="number">5</span>:])</span><br></pre></td></tr></tbody></table></figure><p>Output<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>] =  <span class="number">15</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">3</span>] =  [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line">a[<span class="number">5</span>:] =  [<span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>]</span><br></pre></td></tr></tbody></table></figure><br>列表是可以mutable，也就是可变的。列表的每个元素的值都是可以改变的。<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">4</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### python Tuple(元组)</span></span><br><span class="line">元组和列表一样是有序的。这里的有序是序号有序的意思。 和列表唯一的区别是元组是不可变的。 元组一旦被创建出来，就不能改变了。</span><br><span class="line"></span><br><span class="line">元组用来做write-protect data(写保护的数据)比列表要快。</span><br><span class="line"></span><br><span class="line">元组定义在括号里`()`，里面的每项通过逗号区分开。</span><br><span class="line">```python</span><br><span class="line">t = (<span class="number">5</span>,<span class="string">'program'</span>, <span class="number">1</span>+<span class="number">3j</span>)</span><br></pre></td></tr></tbody></table></figure><br>我们可以通过切片操作来提取项，但是不能改变<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">5</span>,<span class="string">'program'</span>, <span class="number">1</span>+<span class="number">3j</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># t[1] = 'program'</span></span><br><span class="line">print(<span class="string">"t[1] = "</span>, t[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># t[0:3] = (5, 'program', (1+3j))</span></span><br><span class="line">print(<span class="string">"t[0:3] = "</span>, t[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generates error</span></span><br><span class="line"><span class="comment"># Tuples are immutable</span></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><br>Output：<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t[<span class="number">1</span>] =  program</span><br><span class="line">t[<span class="number">0</span>:<span class="number">3</span>] =  (<span class="number">5</span>, <span class="string">'program'</span>, (<span class="number">1</span>+<span class="number">3j</span>))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    t[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">TypeError: <span class="string">'tuple'</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Python-Strings-字符串"><a href="#Python-Strings-字符串" class="headerlink" title="Python Strings 字符串"></a>Python Strings 字符串</h3><p>字符串是一系列的Unicode characters。 我们可以用单引号和双引号来表示字符串。多行字符可以通过三个引号，三个单引号或者三个双引号来表示。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"This is a string"</span></span><br><span class="line">print(s)</span><br><span class="line">s = <span class="string">'''A multiline</span></span><br><span class="line"><span class="string">string'''</span></span><br><span class="line">print(s)</span><br></pre></td></tr></tbody></table></figure><br>Output<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> a string</span><br><span class="line">A multiline</span><br><span class="line">string</span><br></pre></td></tr></tbody></table></figure><br>和列表，元组一样，切片操作<code>[]</code>也可以被用在字符串上，然而，字符串是不可变的。<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Hello world!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s[4] = 'o'</span></span><br><span class="line">print(<span class="string">"s[4] = "</span>, s[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># s[6:11] = 'world'</span></span><br><span class="line">print(<span class="string">"s[6:11] = "</span>, s[<span class="number">6</span>:<span class="number">11</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generates error</span></span><br><span class="line"><span class="comment"># Strings are immutable in Python</span></span><br><span class="line">s[<span class="number">5</span>] =<span class="string">'d'</span></span><br></pre></td></tr></tbody></table></figure><br>Output:<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">4</span>] =  o</span><br><span class="line">s[<span class="number">6</span>:<span class="number">11</span>] =  world</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'str'</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="python-set-（集合）"><a href="#python-set-（集合）" class="headerlink" title="python set （集合）"></a>python set （集合）</h3><p>集合是没有顺序的不重复的项的集合。 集合set定义在花括号<code>{}</code>里，逗号分开。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = {<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment"># printing set variable</span></span><br><span class="line">print(<span class="string">"a = "</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data type of variable a</span></span><br><span class="line">print(<span class="built_in">type</span>(a))</span><br></pre></td></tr></tbody></table></figure><br>Output:<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =  {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>}</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">set</span>'&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>我们在集合上实现操作比如联通和交叉两个集合。集合的每个值都是唯一的，集合操作也可用来消除重复。<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>}</span><br><span class="line">print(a) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}</span><br></pre></td></tr></tbody></table></figure><br>因为集合是无序的一个集合，所以序号index对于集合来说是没有意义的。因此切片操作在集合上是没办法实现的。<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">301</span>, <span class="keyword">in</span> runcode</span><br><span class="line">  File <span class="string">"&lt;interactive input&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'set'</span> <span class="built_in">object</span> does <span class="keyword">not</span> support indexing</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="python-Dictionary-（字典）"><a href="#python-Dictionary-（字典）" class="headerlink" title="python Dictionary （字典）"></a>python Dictionary （字典）</h3><p>字典是由key-value对组成的无序集合。一般我们有很大的数据的时候，我们会想到用字典。 字典对于检索数据来说是最优的。但是我们需要知道key 才能检索到value。<br>在Python 里，字典定义在<code>{}</code>里，每项是的形式是一个对<code>key:value</code>。key 和value 可以是任何的数据类型。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = {<span class="number">1</span>:<span class="string">'value'</span>,<span class="string">'key'</span> = <span class="number">2</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(d)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>我们可以通过key 来检索到相应的value。不可以用value来检索到key哟。not the other way around.<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = {<span class="number">1</span>:<span class="string">'value'</span>,<span class="string">'key'</span>:<span class="number">2</span>}</span><br><span class="line">print(<span class="built_in">type</span>(d))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"d[1] = "</span>, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">"d['key'] = "</span>, d[<span class="string">'key'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generates error</span></span><br><span class="line">print(<span class="string">"d[2] = "</span>, d[<span class="number">2</span>])</span><br></pre></td></tr></tbody></table></figure><br>Output:<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">d[1] = value</span><br><span class="line">d[<span class="string">'key'</span>] = <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="数据类型之间相互转换"><a href="#数据类型之间相互转换" class="headerlink" title="数据类型之间相互转换"></a>数据类型之间相互转换</h3><p>python 可以很方便的把各种数据类型进行转换，比如<code>int()</code>,<code>float()</code>,<code>str()</code>等<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="number">5</span>)</span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">10.6</span>) <span class="comment">#make it closet to 0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(-<span class="number">10.6</span>) <span class="comment">#make it closet to 0</span></span><br><span class="line">-<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>({<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>})</span><br><span class="line">(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="string">'hello'</span>)</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">{<span class="number">1</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">4</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="number">3</span>,<span class="number">26</span>),(<span class="number">4</span>,<span class="number">44</span>)])</span><br><span class="line">{<span class="number">3</span>: <span class="number">26</span>, <span class="number">4</span>: <span class="number">44</span>}</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="Python-类型转换（type-conversion-type-casting-不知道咋翻译"><a href="#Python-类型转换（type-conversion-type-casting-不知道咋翻译" class="headerlink" title="Python 类型转换（type conversion) (type casting 不知道咋翻译)"></a>Python 类型转换（type conversion) (type casting 不知道咋翻译)</h2><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>类型转换其实就是字面的意思。有两周类型转换的方法：（1）隐式数据类型转换 （2）显式数据类型转换</p><h3 id="隐式数据类型转换"><a href="#隐式数据类型转换" class="headerlink" title="隐式数据类型转换"></a>隐式数据类型转换</h3><p>在隐式转换里，python 会自动把一个钟数据类型变成另一种类型。这个过程不需要任何用户执行。<br>我们看一个例子，Python会防止数据丢失，把低数据类型（int)转换成高数据类型（float)。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num_int = <span class="number">123</span></span><br><span class="line">num_flo = <span class="number">1.23</span></span><br><span class="line">num_new = num_int + num_flo</span><br><span class="line">print(<span class="string">"datatype of num_int: "</span>, <span class="built_in">type</span>(num_int))</span><br><span class="line">print(<span class="string">"datatype of num_flo: "</span>, <span class="built_in">type</span>(num_flo))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Value of num_new: "</span>, num_new)</span><br><span class="line">print(<span class="string">"datatype of num_new: "</span>, <span class="built_in">type</span>(num_new))</span><br></pre></td></tr></tbody></table></figure><br>Output:<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datatype of num_int: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">datatype</span> <span class="title">of</span> <span class="title">num_flo</span>:</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Value</span> <span class="title">of</span> <span class="title">num_int</span>:</span> <span class="number">124.23</span></span><br><span class="line">datatype of num_int: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>在上面的程序里，</p><ul><li>把两个变量<code>num_int</code> 和<code>num_flo</code>存在变量<code>num_new</code>中。</li><li>我们看到了三个对象的数据类型</li><li>在输出中，我们能看到，<code>num_int</code>是整形，<code>num_flo</code> 和 <code>num_new</code>都是浮点型。Python 自动的把’new_int’变成了浮点型，为了防止损失。</li></ul><p>现在我们把字符串和整形加一下，我们来看看Python 是怎么处理的。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_int = <span class="number">123</span></span><br><span class="line">num_str = <span class="string">"456"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"datatype of num_int: "</span>, <span class="built_in">type</span>(num_int))</span><br><span class="line">print(<span class="string">"datatype of num_str: "</span>, <span class="built_in">type</span>(num_str))</span><br><span class="line"></span><br><span class="line">print(num_int + num_str)</span><br></pre></td></tr></tbody></table></figure><br>输出是：<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">datatype of num_int: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">datatype</span> <span class="title">of</span> <span class="title">num_str</span>:</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Trackback</span>(<span class="params">most recent call last</span>):</span></span><br><span class="line">File <span class="string">"python"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unsupported oper <span class="keyword">and</span> <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>在上面的程序里，</p><ul><li>两个变量<code>num_int</code> 和<code>num_str</code>。</li><li>我们看到了这两个变量不让加在一起。也就是说Python 不能通过隐式转换将这两个类型的变量加在一起。</li><li>那怎么办呢？ Python对于不自动转换的情况，也提供了一个解决办法，这就是马上要说到的，显式转换。</li></ul><h2 id="显式转换类型"><a href="#显式转换类型" class="headerlink" title="显式转换类型"></a>显式转换类型</h2><p>在显式转换类型，用户自定义转换对象（object)从一个数据类型到另一个数据类型。 我们用内建类型函数，比如<code>int()</code>,<code>float()</code>,<code>str()</code>等等，来进行显数据转换。<br>显式数据类型转换我们也称为typecasting(强制类型转换）。我觉得英文里的casting很有那个味，意思是用户把一种数据类型投射到另一个数据类型。</p><p>语法：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;required_datatype&gt;(expression)</span><br></pre></td></tr></tbody></table></figure><br>这个语法是说，如果我们需要某种数据类型，可以直接数据类型表达式，运用在需要转换的数据上<p></p><p>例3： 用显示转换把字符串和整形数加在一起，从上面我们可以看到，不能隐式转换是不能用在情况上的，<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num_int = <span class="number">123</span></span><br><span class="line">num_str = <span class="string">"456"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"datatype of num_int: "</span>, <span class="built_in">type</span>(num_int))</span><br><span class="line">print(<span class="string">"datatype of num_str before tyep casting: "</span>, <span class="built_in">type</span>(num_str))</span><br><span class="line"></span><br><span class="line">num_str = <span class="built_in">int</span>(num_str)</span><br><span class="line">print(<span class="string">"datatype of num_str after tyep casting: "</span>, <span class="built_in">type</span>(num_str))</span><br><span class="line"></span><br><span class="line">num_sum = num_int + num_str</span><br><span class="line">print(<span class="string">"sum of num_int + num_str: "</span>, num_sum)</span><br><span class="line">print(<span class="string">"datatype of num_sum: "</span>, <span class="built_in">type</span>(num_sum))</span><br></pre></td></tr></tbody></table></figure><br>Output:<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">datatype of num_int: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">datatype</span> <span class="title">of</span> <span class="title">num_str</span> <span class="title">before</span> <span class="title">tyep</span> <span class="title">casting</span>:</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">datatype</span> <span class="title">of</span> <span class="title">num_str</span> <span class="title">after</span> <span class="title">tyep</span> <span class="title">casting</span>:</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">sum</span> <span class="title">of</span> <span class="title">num_int</span> + <span class="title">num_str</span>:</span> <span class="number">579</span></span><br><span class="line">datatype of num_sum: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>在上面的程序里，我们进行了几个操作：<br>（1）<code>num_str</code> 和 <code>num_int</code> 加在一起<br>（2）我们把 <code>num_str</code>从字符串（高）数据类型转换成整型（低）数据类型，用<code>int()</code>函数实现。<br>（3）把<code>num_str</code> 转成整型之后，两个家伙就可以加到一起了。<br>（4）我们得到我们想要的数据类型是整型的<code>num_sum</code><p></p><p>这里有几点需要记住的：<br>（1）类型转换就是把一个对象（object）从一种数据类型转换成另一种数据类型。<br>（2）隐式数据类型转换是Python编译器自动实现的<br>（3）python为了避免数据丢失，自发的实行隐式数据类型转换<br>（4）在运用显示数据类型转换时，如果转换的函数选用不恰当，可能会造成数据的丢失。</p><h2 id="python-输入输出-和引入-（input-outpu-import）"><a href="#python-输入输出-和引入-（input-outpu-import）" class="headerlink" title="python 输入输出 和引入 （input ,outpu ,import）"></a>python 输入输出 和引入 （input ,outpu ,import）</h2><p>python 提供了很多内置函数。这部分我们就讲讲<code>input()</code>和<code>output()</code>这两个函数，表示的是标准的输入和输出操作。</p><h3 id="Python-输出操作-用print-函数进行"><a href="#Python-输出操作-用print-函数进行" class="headerlink" title="Python 输出操作 用print()函数进行"></a>Python 输出操作 用<code>print()</code>函数进行</h3><p>我们用<code>print()</code>函数来输出数据到标准的输出设备上（比如屏幕）。我们也可以把数据输出到一个文件里。<br>一个简单的例子：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'This sentence is output to the screen'</span>)</span><br></pre></td></tr></tbody></table></figure><br>Output:<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This sentence <span class="keyword">is</span> output to the screen</span><br></pre></td></tr></tbody></table></figure><br>另一个例子：<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">print(<span class="string">'The value of a is '</span>, a)</span><br></pre></td></tr></tbody></table></figure><p></p><p>Output:<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The value of a is 5</span><br></pre></td></tr></tbody></table></figure><p></p><p>第二个例子中，其实我们发现，空格加在字符串和变量<code>a</code>的数值中间。这个其实是默认的，我们也可以改成任何形式。<br>实际上，<code>print()</code>函数真正的语法是这样的：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(*objects, sep = <span class="string">' '</span>, end =<span class="string">'\n'</span> , file = sys.stout, flush = <span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><br>这里我们来解释一下，<br>（1） <code>objects</code>是我们要打印出来的值（value)<br>（2）<code>sep</code>是分隔符，用来隔开不用的值(value)<p></p><h2 id="python-文件"><a href="#python-文件" class="headerlink" title="python 文件"></a>python 文件</h2><p>文件被定义在disk 的一个位置，用来存储相关的信息，他们用来永远保存数据在non-volatile的存储器里（比如硬盘）<br>因为在Random Access Memory (RAM) 是volatile(易失性的)(当电脑关机的时候，会丢失数据)，我们用文件为了以后不知道未来的某一时刻用，所以我们需要永久保存他们。<br>当我们想读或者写一个文件的时候，我们需要打开他。当我们完成之后，需要把资源解放，但是要和文件紧紧的绑在一起。<br>因此，在PYthon里，一个文件的操作发生以下的顺序里：</p><ol><li>打开一个文件</li><li>读或者写（进行操作）</li><li>关闭一个文件</li></ol><h3 id="python-里打开文件"><a href="#python-里打开文件" class="headerlink" title="python 里打开文件"></a>python 里打开文件</h3><p>Python有个内嵌的函数可以打开文件<code>open()</code>。这个函数返回return 一个文件对象，也叫做一个handle(句柄)，可以用来读或者相对应的改变文件<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">"test.txt"</span>) <span class="comment"># 打开一个current directory 的文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">"C:/Readme.txt"</span>) <span class="comment">#specifying full path</span></span><br></pre></td></tr></tbody></table></figure><br>当我们打开一个文件的时候，我们可以指定一个模式。 在模式里，我们可以确定我们想读<code>r</code>，写<code>w</code>或添加<code>a</code>在一个文件上进行操作。我们也可以选择我们想要打开的在text模式里还是在binary模式。<br>默认模式是在text上读， 在这个模式，我们获取的是字符串当我们读文件。另一方面，二进制模式返回的是比特，这个模式用来处理非text文件像图片或者可执行文件。<p></p><div class="table-container"><table><thead><tr><th>Mode</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td><code>r</code></td><td style="text-align:center">打开一个文件来读</td></tr><tr><td><code>w</code></td><td style="text-align:center">打开一个文件来写，当没有这个文件的时候，创建一个文件。如果存在这个文件的时候， 删截这个文件</td></tr><tr><td><code>x</code></td><td style="text-align:center">打开一个文件用来操作第一次，如果文件存在，则操作失败</td></tr><tr><td><code>t</code></td><td style="text-align:center">打开text模式</td></tr><tr><td><code>b</code></td><td style="text-align:center">打开二进制模式</td></tr><tr><td><code>+</code></td><td style="text-align:center">打开文件为了更新（读或者写）</td></tr></tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">"test.txt"</span>)      <span class="comment"># equivalent to 'r' or 'rt'</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">"test.txt"</span>,<span class="string">'w'</span>)  <span class="comment"># write in text mode</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">"img.bmp"</span>,<span class="string">'r+b'</span>) <span class="comment"># read and write in binary mode</span></span><br></pre></td></tr></tbody></table></figure><p>不像其他的语言，字符串<code>a</code>不表示数字97，除非被编码<code>ASCII</code>码。 此外，默认的编码和平台是相关的。在windows下是<code>cp1252</code>，Linux下是<code>utf-8</code>。<br>所以我们必须不仅仅考虑默认的编码形式也需要考虑不同的Platform上不同的形式。<br>因此，当我们处理text模式的时候，我们强烈建议特别指出编码的类型<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">"test.txt"</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="python-里关闭文件"><a href="#python-里关闭文件" class="headerlink" title="python 里关闭文件"></a>python 里关闭文件</h3><p>当我们结束对文件的操作的时候，我们需要关闭文件。关闭一个文件会空出来资源，资源仅仅的和文件绑在一起。执行函数是<code>close()</code>。<br>python有一个垃圾收集器，用来清理没有引用的对像，这些对象和我们关闭文件没有任何关系。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">"text.txt"</span>,encoding =<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># performing file operation </span></span><br><span class="line">f.write(<span class="string">'hello world !'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure><p></p><p>这个方法不是很安全。如果出现一个异常的时候，代码在并且没有执行关闭文件。<br>一个更安全的方式是用<code>try...finally</code>块<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">"text.txt"</span>,encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    f.write(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">f = close()</span><br></pre></td></tr></tbody></table></figure><br><code>finally</code>模块的的作用其实是，不管是否有异常错误发生 或者try 里面的执行完了，都执行finally 块里的语句。<p></p><p>其实，最好的用来关闭文件的方法是使用<code>with</code>声明。 这个可以保证文件关闭当with里面有声明。其实我理解的意思是，with 可以自动的关闭文件。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"text.txt"</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment"># performing file operation </span></span><br><span class="line">    f.write(<span class="string">'hello world'</span>)</span><br></pre></td></tr></tbody></table></figure><br>我们可以看出来最后的那种方式<code>with</code>中，是没有<code>f.close()</code>这个语句的。<code>with</code>声明就神奇在可以保证合适的释放和获取资源。<p></p><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>为了在python里写文件，我们需要先打开文件，然后开始写<code>w</code>，然后添加通过<code>a</code>或者<code>x</code>。<br>我们需要很小心用这个<code>w</code>模式，因为如果这个文件本身已经存在的话，很容易就没注意 ，然后就把以前的文件覆盖了，最后就找不到以前的文件了。<br>写一个字符串或者比特，我们用<code>write()</code>方法。这个方法返回很多字符串。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"text.txt"</span>,<span class="string">'w'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(<span class="string">"my first file \n"</span>)</span><br><span class="line">    f.write(<span class="string">"This file\n\n"</span>)</span><br><span class="line">    f.write(<span class="string">"contains three lines\n"</span>)</span><br></pre></td></tr></tbody></table></figure><br>这段程序将创建一个新的文件叫做<code>test.txt</code>在当前的目录下，如果不存在这个名的文件的时候被第一次创建出来，如果存在这个名字的文件的话，会被覆盖的overwrite.<br>需要注意的是，使用<code>write</code>进行写的时候，如果要想向文件写入多行数据的时候，不会自动给各行添加换行符(newline characters)，我们需要加换行符，因为我们在读的时候，读取各行数据的同时，我们还读取了行尾的换行符。<p></p><h3 id="读文件了"><a href="#读文件了" class="headerlink" title="读文件了"></a>读文件了</h3><p>为了用Python来读文件，我们必须打开文件用<code>r</code>这个模式。<br>在Python里有好几种方式来通过Python读取文件。我们用<code>read(size)</code> 方法来读取size 数量的数据。如果<code>size</code>参数没有特别指定，Python 读到文件的结束并且返回。<br>我们可以读<code>text.txt</code>文件，我们通过上面学到的方式来写<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">"text.txt"</span>,<span class="string">'r'</span>,encoding = <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">4</span>)  <span class="comment"># read first 4 data</span></span><br><span class="line"><span class="string">'This'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">4</span>)  <span class="comment"># 读接下来的四个data</span></span><br><span class="line"><span class="string">' is '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()   <span class="comment"># 读文件剩下来的所有内容</span></span><br><span class="line"><span class="string">'my first file\nThis file\ncontains three lines\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()   <span class="comment"># 如果还要接着读的话，返回空字符串</span></span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></tbody></table></figure><br>我们看到，如果通过<code>read()</code>方法返回一个换行符<code>\n</code>。一旦已经读到了文件的结尾的时候，如果还想读的话，只能返回空字符串了。<br>我们能改变此时文件的指针（位置，也就是读到哪了）用<code>seek()</code>的方法。 同样的我们要是想返回我们现在此时所在的文件的是位置， 才有<code>tell()</code>方法(比特数量)<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell() <span class="comment"># 获取当前文件的位置</span></span><br><span class="line"><span class="number">56</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">0</span>) <span class="comment"># 把文件的指针带到初始的位置</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.read())</span><br><span class="line">This <span class="keyword">is</span> my first file</span><br><span class="line">This file</span><br><span class="line">contians three lines</span><br></pre></td></tr></tbody></table></figure><br>我们也可以通过循环一行一行的读文件，这个方法很有效而且很快<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">print(line, end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">This <span class="keyword">is</span> my first file</span><br><span class="line">This file</span><br><span class="line">contians three lines</span><br></pre></td></tr></tbody></table></figure><br>在程序里，文件里每行都包括一个换行符<code>\n</code>。我们最后的用’end’参数在<code>print()</code>函数里，是为了避免当打印的时候，碰到两个换行符，换两个行干嘛，占地方，我们不要<p></p><p>其实， 我们也可以用<code>readline()</code>方法来读文件的每一行。 这个方法读一个文件，读到碰到换行符位置。并且换行符也是读进去的。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line">`This <span class="keyword">is</span> my first file\n`</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">'This file\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line">`contians three lines\n`</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></tbody></table></figure><br>最后，<code>readlines()</code>方法可以返回剩下文件的，并且读出剩下的所有文件。 所有的读的方法，如果到了文件的最后，已经没有可读的内容的时候，还有继续执行读指令，都会返回空。<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readlines()</span><br><span class="line">[`This <span class="keyword">is</span> my first file\n`,<span class="string">'This file\n'</span>,`contians three lines\n`]</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Python-文件方法大合集"><a href="#Python-文件方法大合集" class="headerlink" title="Python 文件方法大合集"></a>Python 文件方法大合集</h3><p>一个表格（need to update)</p><h2 id="Python-目录（我暂时理解为地址）"><a href="#Python-目录（我暂时理解为地址）" class="headerlink" title="Python 目录（我暂时理解为地址）"></a>Python 目录（我暂时理解为地址）</h2><p>如果在我们的Python 程序里，有大量的文件需要我们来管理， 这个时候我们可以把我们的代码通过一定的方式，放在不同的路径下来管理。比如电脑有C盘，D盘，E盘，其实都是为了让我们方便管理的。<br>一个目录或者文件夹，我们经常用到，里面会有很多的文件和子目录。 Python通过<code>as</code>模型来提供给我们一些非常有用的方法来对目录或者文件进行操作。</p><h3 id="获得此时的目录"><a href="#获得此时的目录" class="headerlink" title="获得此时的目录"></a>获得此时的目录</h3><p>我们如果想获取此时正在工作的目录，可以用<code>as</code>Module里的<code>getcwd()</code>方法。<br>这个方法可以返回此时正在工作的目录，并且是通过字符串的形式返回。我们也可以用<code>getcwbd()</code>方法来获得这个目录以比特对象的形式。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'C:\\Program Files\\PyScripter'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwbd()</span><br><span class="line"><span class="string">b'C:\\Program Files\\PyScripter'</span></span><br></pre></td></tr></tbody></table></figure><br>额外的反斜杠是转义字符串。<code>print()</code>函数就可以合适的表示地址<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(os.getcwd())</span><br><span class="line"><span class="string">'C:\Program Files\PyScripter'</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="改变目录"><a href="#改变目录" class="headerlink" title="改变目录"></a>改变目录</h3><p>我们可以改变当前的工作目录，通过<code>chdir()</code>方法。<br>如果我们想到别的路径上，通过<code>chdir()</code>方法来实现需要吧新路径变成字符串。可以用前斜杠或者后斜杠来区别地址的不用元素。</p><p>我觉得还是用<code>/</code>比较好，<code>\</code>会有很多别的用途 ，比如<code>\n</code>，所以如果当<code>\</code>时，还需要用转义字符才可以<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">'C:\\Python33'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(os.getcwd())</span><br><span class="line">C:\Python33</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="目录列表，文件列表"><a href="#目录列表，文件列表" class="headerlink" title="目录列表，文件列表"></a>目录列表，文件列表</h3><p>所有的文件和子目录在一个目录里，可以同时获取通过用<code>listdir()</code>方法。<br>这个方式是先找到这个目录，然后返回这个目录里的子目录和文件。如果特别指定路径，返回正在工作的目录的一列子目录和文件。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(os.getcwd())</span><br><span class="line">C:\Python33</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">'DLLS'</span>,</span><br><span class="line"><span class="string">'Doc'</span>,</span><br><span class="line"><span class="string">'include'</span>,</span><br><span class="line"><span class="string">'Lib'</span>,</span><br><span class="line"><span class="string">'LICENSE.txt'</span>,</span><br><span class="line"><span class="string">'python.exe'</span>,</span><br><span class="line"><span class="string">'Scripts'</span>,</span><br><span class="line"><span class="string">'tcl'</span>,</span><br><span class="line"><span class="string">'Tools'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'G:\\'</span>)</span><br><span class="line">[<span class="string">'$RECYCLE.BIN'</span>，</span><br><span class="line"><span class="string">'Movies'</span>,</span><br><span class="line"><span class="string">'Music'</span>,</span><br><span class="line"><span class="string">'series'</span>,</span><br><span class="line"><span class="string">'System Volume Information'</span>]</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="创建新的目录"><a href="#创建新的目录" class="headerlink" title="创建新的目录"></a>创建新的目录</h3><p>‘mkdir()’方法可以建一个新的目录。<br>可以方法可以进入到新的目录的路径。如果整个路径没有特指，新的目录会在当前的工作目录中创建<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os. mkdir(<span class="string">'test'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">'test'</span>]</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="重新命名目录或者一个文件"><a href="#重新命名目录或者一个文件" class="headerlink" title="重新命名目录或者一个文件"></a>重新命名目录或者一个文件</h3><p><code>rename()</code>可以用来重新命名一个目录或者文件。<br>对于重新命名一个目录或者文件， <code>rename</code>方法需要一个旧的名字作为第一个argument, 新的名字作为第二个argument.<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">'test'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">'test'</span>,<span class="string">'new_one'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">'new_one'</span>]</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="移除目录或者文件"><a href="#移除目录或者文件" class="headerlink" title="移除目录或者文件"></a>移除目录或者文件</h3><p>一个文件可以移除（也就是删除）通过<code>remove()</code>的方法。<br>同样的，<code>rmdir()</code>也可以移除文件，但是仅当这文件夹是空的才可以, 否则, 抛出OSError。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">'new_one'</span>,<span class="string">'old.txt'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">'old.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">'new_one'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">'new_one'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[]</span><br></pre></td></tr></tbody></table></figure><br>为了移除一个没空的目录，我们可以用<code>rmtree</code>在<code>shutil</code>模式里<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">'test'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">'test'</span>)</span><br><span class="line">Traceback(most recent call last)</span><br><span class="line">...</span><br><span class="line">OSEerror:[WinError <span class="number">145</span>] The directory <span class="keyword">is</span> <span class="keyword">not</span> empty:<span class="string">'test'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.rmtree(<span class="string">'test'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment">## Python Excetpion</span></span><br><span class="line">其实我们很容易会出现错误和异常。只要Python编辑器碰到错误，不识别神了，就有错误和异常。</span><br><span class="line">有时候我们可以特意产生一些错误在程序了。一个Python 程序当碰到未处理的异常的时候，会终止。这些错误大概可以分为两类：（<span class="number">1</span>）语法错误 （<span class="number">2</span>）逻辑错误(Exceptions)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Python 语法错误</span></span><br><span class="line">当语言的逻辑裸着结构不符合Python 语言的时候，就会出现错误，叫做syntax error 或者parsing error.</span><br><span class="line">我们举个例子</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a&lt;<span class="number">3</span></span><br><span class="line">File <span class="string">"&lt;interactive input&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">3</span></span><br><span class="line">           ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></tbody></table></figure><br>在例子里，这个箭头指的是分析到程序跑到了语法错误里，因为我们可以看到<code>if</code>声明中，确实<code>:</code>。<p></p><h3 id="Python-逻辑错误-Exceptions，叫异常"><a href="#Python-逻辑错误-Exceptions，叫异常" class="headerlink" title="Python 逻辑错误(Exceptions，叫异常)"></a>Python 逻辑错误(Exceptions，叫异常)</h3><p>这种异常或者叫做逻辑错误，会出现在程序执行过程中（在通过语法测试之后）。<br>例如，（1）当我们打开一个文件（读），但是这个文件不存在<code>FileNotFoundError</code>（2）一个数除以<code>0</code>（<code>ZeroDivisionError</code>）（3）引入一个模块，但是</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>排序 （熟到可以默写）</title>
    <link href="http://watermelondrip.github.io/2021/05/05/%E6%8E%92%E5%BA%8F/"/>
    <id>http://watermelondrip.github.io/2021/05/05/%E6%8E%92%E5%BA%8F/</id>
    <published>2021-05-04T17:59:00.000Z</published>
    <updated>2021-05-04T17:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>排序<a href="https://github.com/CyC·2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%8E%92%E5%BA%8F.md">顺序</a></p><p>思路是：</p><p>（1）快速选择，用于求解第k个元素的问题</p><p>（2）堆:堆的中心就一个，那就是动态求极值。 堆可以用二叉树实现，叫做二叉堆。二叉堆的性质就是堆的性质不变。</p><p> (3) 三向快排： 快排的核心思想是选择一个枢纽，左边的都比枢纽小，右边的都比枢纽大。 然后堆分成的两部分再进行递归快排。 但是如果有很多重复元素的时候呢，因为快排会对一个都是重复元素的数组再进行递归，其实我们已经知道了， 不用再进行递归了，因为已经是有序的了。 怎么实现呢？</p><pre><code>- 三向排序： 对于一个数组，一次扫描要有三个指针。</code></pre><h2 id="1-LC215-Kth-Element-Kth-Element"><a href="#1-LC215-Kth-Element-Kth-Element" class="headerlink" title="1. (LC215) Kth Element Kth Element"></a>1. (LC215) Kth Element <a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/description/">Kth Element</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br> 示例 1：<br>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>最简单的是排序想法，直接把数组排序，然后找到k个就好了</li><li>堆， 堆是一种数据结构，一个很牛的<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/solution/ge-chong-pai-xu-suan-fa-tu-xie-zong-jie-by-ke-ai-x/">题解</a>和一个英文<a href="https://towardsdatascience.com/data-structure-heap-23d4c78a6962">解释</a> 和一个中文<a href="https://guguoyu.blog.csdn.net/article/details/81283998?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs">解释</a></li><li><a href="https://docs.python.org/3/library/heapq.html">heapq</a> 模块： 可能在面试过程中，有的面试官不让用，但是这个heapq还是很方便的。 (1)hq.heapqpush(heap,item) ：压入堆的意思，压入的是item （2）hq.heappop(heap)：弹出且返回最小的。hq.heappushpop(heap,item):先压入iem，然后弹出堆里最小的项。</li></ol><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest1</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; int:</span> <span class="comment">#1. 排序</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> nums[-k]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest2</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; int:</span> <span class="comment"># 2. 最大堆  用heapq模块</span></span><br><span class="line">        <span class="keyword">import</span> heapq <span class="keyword">as</span> hq</span><br><span class="line">        heap = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            hq.heappush(heap,i)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(heap) &gt; k:</span><br><span class="line">                hq.heappop(heap)</span><br><span class="line">        <span class="keyword">return</span> heap[<span class="number">0</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest3</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; int:</span> <span class="comment"># 3.  最大堆， 构造堆模块</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">min_heapify</span>(<span class="params">array, i</span>):</span></span><br><span class="line">            left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">            right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">            length = <span class="built_in">len</span>(array) - <span class="number">1</span></span><br><span class="line">            smallest = i</span><br><span class="line">            <span class="keyword">if</span> left &lt;= length <span class="keyword">and</span> array[i] &gt; array[left]:</span><br><span class="line">                smallest = left</span><br><span class="line">            <span class="keyword">if</span> right &lt;= length <span class="keyword">and</span> array[smallest] &gt; array[right]:</span><br><span class="line">                smallest = right</span><br><span class="line">            <span class="keyword">if</span> smallest != i:</span><br><span class="line">                array[i], array[smallest] = array[smallest], array[i]</span><br><span class="line">                min_heapify(array, smallest)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">build_min_heap</span>(<span class="params">array</span>):</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(array)//<span class="number">2</span>)):</span><br><span class="line">                min_heapify(array, i)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">heapsort</span>(<span class="params">array</span>):</span></span><br><span class="line">            <span class="comment">#array = array.copy()</span></span><br><span class="line">            build_min_heap(array)</span><br><span class="line">            sorted_array = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">                array[<span class="number">0</span>], array[-<span class="number">1</span>] = array[-<span class="number">1</span>], array[<span class="number">0</span>]</span><br><span class="line">                sorted_array.append(array.pop())</span><br><span class="line">                min_heapify(array, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> sorted_array</span><br><span class="line">        result = heapsort(nums)</span><br><span class="line">        <span class="keyword">return</span> result[-k]</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest4</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; int:</span> <span class="comment"># 4. 快速排序 [快速排序](https://jackkuo666.github.io/Data_Structure_with_Python_book/chapter6/section4.html)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">alist, low ,high</span>):</span></span><br><span class="line">            mid_value = alist[low]</span><br><span class="line">            <span class="keyword">while</span> low &lt; high:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[high] &gt;= mid_value:</span><br><span class="line">                    high-=<span class="number">1</span></span><br><span class="line">                alist[low] = alist[high]</span><br><span class="line">                <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[low] &lt;= mid_value:</span><br><span class="line">                    low+=<span class="number">1</span></span><br><span class="line">                alist[high] = alist[low]</span><br><span class="line">            alist[low] = mid_value</span><br><span class="line">            <span class="keyword">return</span> low</span><br><span class="line">        k = <span class="built_in">len</span>(nums) - k</span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        high = <span class="built_in">len</span>(nums) -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            p = partition(nums,low ,high)</span><br><span class="line">            <span class="keyword">if</span> k &lt; p:</span><br><span class="line">                high = p - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> k &gt; p:</span><br><span class="line">                low = p + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> nums[p]</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">         </span><br></pre></td></tr></tbody></table></figure><h2 id="2-LC347-前-K-个高频元素-前-K-个高频元素"><a href="#2-LC347-前-K-个高频元素-前-K-个高频元素" class="headerlink" title="2. (LC347) 前 K 个高频元素 前 K 个高频元素"></a>2. (LC347) 前 K 个高频元素 <a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">前 K 个高频元素</a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素<br> 示例 1：<br>输入: nums = [1,1,1,2,2,3], k = 2<br>输出: [1,2]</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>最简单的是排序想法，直接把数组排序，但是不满足时间复杂度的要求， 这里有个一个点是sort()函数，单独有一篇文章讲。</li><li>进一步，为了满足时间复杂度的要求，需要对解法一的排序过程进行改进。因为最终需要返回前k个频率最大的元素，可以想到借助堆这种数据结构。通过维护一个元素数目为k的最小堆，每次都将新的元素与对顶端的元素（也就是堆中频率最小的元素）进行比较，如果新的元素的频率比堆顶端的元素大，则弹出堆顶端的元素，将新的元素添加进堆中。最终，堆中的k个元素即为前k个高频元素。 其中用到了.items(), #The items() method returns a view object. The view object contains the key-value pairs of the dictionary, as tuples in a list.</li><li>桶排序(bucket sort)，用空间复杂度换取时间复杂度的方法。为每一个数字设置一个桶，桶中是该数字出现的次数，然后对桶进行排序，实际上，上面的排序算法就说使用普通的排序方法对频率桶进行了排序，现在我们使用桶排序对频次惊醒排序。 桶排序为了进一步优化时间复杂度。 先统计数组中元素的频次。接着，将数组中的元素按着出现频次进行分组，即出现频次为i的元素存放在第i个桶，最后从桶中逆序取出前k个元素。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent_1</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; List[int]:</span> <span class="comment"># 1. 排序</span></span><br><span class="line">        freq_dict = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums: <span class="comment"># 统计元素的频率</span></span><br><span class="line">            freq_dict[num] = freq_dict.get(num , <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        freq_dict_sort = <span class="built_in">sorted</span>(freq_dict.items(), key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse = <span class="literal">True</span>)</span><br><span class="line">        ret = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            ret.append(freq_dict_sort[i][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topKFrequent_2</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; List[int]:</span> <span class="comment"># 2. 堆排序</span></span><br><span class="line">freq_dict = <span class="built_in">dict</span>() <span class="comment"># 统计元素的频率</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">freq_dict[num] = freq_dict.get(num,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 维护一个大小为k的最小堆，使得堆中的元素即为前k个高频元素</span></span><br><span class="line">pq = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> freq_dict.items(): </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(pq)&lt; k:</span><br><span class="line">heapq.heappush(pq, (value,key))</span><br><span class="line"><span class="keyword">elif</span> value &gt; pq[<span class="number">0</span>][<span class="number">0</span>]:</span><br><span class="line">heapq.heapreplace(pq, (value,key))</span><br><span class="line">ret = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">while</span> pq:</span><br><span class="line">ret.append(heapq.heappop(pq)[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topKFrequent_3</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; List[int]:</span> <span class="comment"># 3. 桶排序</span></span><br><span class="line">freq_dict = <span class="built_in">dict</span>() <span class="comment"># 统计元素频率</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">freq_dict[num] = freq_dict.get(num, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">bucket = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)+ <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> freq_dict.items():</span><br><span class="line">bucket[value].append(key)</span><br><span class="line">ret = <span class="built_in">list</span>() <span class="comment">#  逆序取出前k个元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(nums))):</span><br><span class="line"><span class="keyword">if</span> bucket[i]:</span><br><span class="line">ret.extend(bucket[i])</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ret)&gt;=k:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> ret[:k]</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ol><li>排序</li></ol><ul><li>时间复杂度：$O(nlogn)$</li><li>空间复杂度：$O(n)$ : 最极端的情况下（每个元素都不同），用于存储元素及其频率的map需要存储n个键值对</li></ul><ol><li>堆排序</li></ol><ul><li>时间复杂度：$O(nlogk)$ 其中n表示数组的长度。首先，遍历一遍数组统计元素的频率，这一系列操作的时间复杂度是O(n);接着，遍历用于存储元素频率的map，如果元素的频率大于最小堆中顶部的元素，则将顶部的元素删除并将该元素加入堆中，这一系列操作的时间复杂度是O(nlogk)的；最后，弹出堆中的元素所需要的时间复杂度O(klogk)。因此总的时间复杂度是O(nlogk)</li><li>空间复杂度：$O(n)$</li></ul><ol><li>桶排序</li></ol><ul><li>时间复杂度：$O(n)$ 数组的长度</li><li>空间复杂度：$O(n)$</li></ul><h2 id="3-LC75-颜色分类-颜色分类"><a href="#3-LC75-颜色分类-颜色分类" class="headerlink" title="3. (LC75) 颜色分类 颜色分类"></a>3. (LC75) 颜色分类 <a href="https://leetcode-cn.com/problems/sort-colors/">颜色分类</a></h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。<br>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></tbody></table></figure><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>三路快排</li></ul><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><ul><li>在快排的基础上，将组数分为三个部分，及大于、等于、小于三个部分，其中大于和小于部分继续递归快排  </li><li>（lc官方解题）我们使用一个指针ptr表示头部位置的范围，ptr中存储了一个整数，表示数组nums从位置0到位置ptr - 1都属于【头部】。ptr的初始值为0，表示还没数处于【头部】。 在第一次遍历中，我们从左向右遍历整个数组，如果找到了0，那么就需要将0与【头部】位置的元素位置进行交换，并将【头部】向后扩充一位，结束后头部只有0。第二次同上。但是我们想要一次遍历怎么办，我们就要俩个指针。 </li><li>我们用指针p0 来交换 0， p1来交换1，初始值都是0。当从左向右遍历整个数组时:<br>  (1) 如果找到1， 那么将其与nums[p1]进行交换，并将p1向后移动一个位置。<br>  （2) 如果找到了0， 那么将其与nums[p0]交换的话，可能把1也交换出去。当p0 &lt; p1时，我们需要再将nums[i] 与nums[p1]进行交换，其中</li></ul><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ul><li>双指针</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortColors</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        p0 = p1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">1</span>:</span><br><span class="line">                nums[i] , nums[p1] = nums[p1] , nums[i]</span><br><span class="line">                p1+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                nums[i] , nums[p0] = nums[p0] , nums[i]</span><br><span class="line">                <span class="keyword">if</span> p0 &lt; p1:</span><br><span class="line">                    nums[i] , nums[p1] = nums[p1] , nums[i]</span><br><span class="line">                p0+=<span class="number">1</span></span><br><span class="line">                p1+=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul><h3 id="大佬解题"><a href="#大佬解题" class="headerlink" title="大佬解题"></a>大佬解题</h3><ol><li><a href="https://www.cnblogs.com/xugenpeng/p/9950007.html#%E6%8F%8F%E8%BF%B0">【LeetCode题解】347_前K个高频元素（Top-K-Frequent-Elements）</a></li></ol><h2 id="下一个排列"><a href="#下一个排列" class="headerlink" title="下一个排列"></a>下一个排列</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>下一个排列”的定义是：给定数字序列的字典序中下一个更大的排列。如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>我们可以将该问题形式化地描述为：给定若干个数字，将其组合为一个整数。如何将这些数字重新排列，以得到下一个更大的整数。如 123 下一个更大的数为 132。如果没有更大的整数，则输出最小的整数。</p><p>以 1,2,3,4,5,6 为例，其排列依次为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">123456</span><br><span class="line">123465</span><br><span class="line">123546</span><br><span class="line">...</span><br><span class="line">654321</span><br></pre></td></tr></tbody></table></figure><p>可以看到有这样的关系：123456 &lt; 123465 &lt; 123546 &lt; … &lt; 654321。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        left = <span class="built_in">len</span>(nums)-<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> left&gt;=<span class="number">0</span> <span class="keyword">and</span> nums[left] &gt;= nums[left+<span class="number">1</span>]:</span><br><span class="line">            left-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;=<span class="number">0</span>:</span><br><span class="line">            right = <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> right &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[right] &lt;= nums[left]:</span><br><span class="line">                right -=<span class="number">1</span></span><br><span class="line">                print(right)</span><br><span class="line">            nums[right],nums[left] = nums[left], nums[right]</span><br><span class="line">       </span><br><span class="line">        left+=<span class="number">1</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt; right:</span><br><span class="line">            </span><br><span class="line">            nums[right],nums[left] = nums[left], nums[right]</span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">            right-=<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="LC56-56-合并区间"><a href="#LC56-56-合并区间" class="headerlink" title="(LC56) 56. 合并区间"></a>(LC56) 56. 合并区间</h2><p> <a href="https://leetcode-cn.com/problems/merge-intervals/">56. 合并区间</a></p><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals = [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出：[[1,6],[8,10],[15,18]]</span><br><span class="line">解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, intervals: List[List[<span class="built_in">int</span>]]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        intervals.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        merged = []</span><br><span class="line">        <span class="keyword">for</span> interval <span class="keyword">in</span> intervals:</span><br><span class="line">            <span class="comment"># 如果列表为空，或者当前区间与上一区间不重合，直接添加</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> merged <span class="keyword">or</span> merged[-<span class="number">1</span>][<span class="number">1</span>] &lt; interval[<span class="number">0</span>]:</span><br><span class="line">                merged.append(interval)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则的话，我们就可以与上一区间进行合并</span></span><br><span class="line">                merged[-<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(merged[-<span class="number">1</span>][<span class="number">1</span>], interval[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merged </span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(nlogn)$. 其中n为区间的数量。除去排序的开销，我们只需要一次线性扫描，所以主要的时间开销是排序的$O(nlogn)$.</li><li>空间复杂度：$O(logn)$. 排序所需要的空间</li></ul>]]></content>
    
    
    <summary type="html">快速选择，堆，三向快排</summary>
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣算法" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>动态规划 - 打家劫舍</title>
    <link href="http://watermelondrip.github.io/2021/05/05/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <id>http://watermelondrip.github.io/2021/05/05/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</id>
    <published>2021-05-04T14:00:00.000Z</published>
    <updated>2021-05-05T20:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打家劫舍是一系列很经典的问题，这个问题大概是假设一个什么样的场景呢？</p><ol><li>可以通过求一堆子问题的解，来求出原问题的解。</li><li>每个子问题的解是和前面的子问题有关 ，和后面的子问题无关</li><li>每个子问题要求最大值，并且该点的选取会影响这个点附近的值的选择与否，也就是说每个点和附近的点有关联性，但是这种关联不会延伸到很远。</li></ol><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">nums</span>):</span></span><br><span class="line">    len_nums = <span class="built_in">len</span>(nums)</span><br><span class="line">    first, second = nums[<span class="number">0</span>], <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, len_nums):</span><br><span class="line">        first, second = second , <span class="built_in">max</span>(first + nums[i], second)</span><br><span class="line">    <span class="keyword">return</span> second</span><br></pre></td></tr></tbody></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ol><li>首先是first 和 second,我觉得这个其中的奥秘是，选第一个还是选第二个，如果选第二个就不能选第一个了</li><li>第三个数和以后的数呢， 选第三个数的时候就意味着不能选第二个了，但是可以选第一个了，所以第一个数得到的最大值就可以直接像接力棒接力似的，让第三棒接着跑了。</li></ol><h1 id="LC198-打家劫舍-打家劫舍"><a href="#LC198-打家劫舍-打家劫舍" class="headerlink" title="(LC198) 打家劫舍   打家劫舍"></a>(LC198) 打家劫舍   <a href="https://leetcode-cn.com/problems/house-robber/description/">打家劫舍</a></h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">偷窃到的最高金额 = 1 + 3 = 4 。 </span><br></pre></td></tr></tbody></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>动态方程 <script type="math/tex">dp[i] = max(dp[i-1], dp[i-2] + nums[i])</script></li></ul><h4 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><h5 id="数组存储"><a href="#数组存储" class="headerlink" title="数组存储"></a>数组存储</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        dp = [<span class="number">0</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">1</span>],nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i])</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n)</script>,其中 <script type="math/tex">n</script>是数组长度。只需要对数组遍历一次。 </li><li>空间复杂度：<script type="math/tex">O(n)</script>。使用数组存储结果。</li></ul></li></ul><h5 id="滚动数组存储"><a href="#滚动数组存储" class="headerlink" title="滚动数组存储"></a>滚动数组存储</h5><p>考虑到每间房屋的最高总金额只和该房屋的前两间房屋的最高总金额有关，因此我们使用滚动数组，也就是每个时刻至保存前两间房屋的最高总金额。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        dp0 = nums[<span class="number">0</span>]</span><br><span class="line">        dp1 = <span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>])</span><br><span class="line">        first,second = dp0,dp1 </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            second,first =<span class="built_in">max</span>(second,first+nums[i]), second </span><br><span class="line">            print(<span class="string">'first,second ='</span>,first,second)</span><br><span class="line">        <span class="keyword">return</span> second</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n)</script>,其中 <script type="math/tex">n</script>是数组长度。只需要对数组遍历一次。 </li><li>空间复杂度：<script type="math/tex">O(1)</script>。使用滚动数组存储结果。</li></ul></li></ul><h3 id="LC213-打家劫舍-II-打家劫舍-II"><a href="#LC213-打家劫舍-II-打家劫舍-II" class="headerlink" title="(LC213)  打家劫舍 II   打家劫舍 II"></a>(LC213)  打家劫舍 II   <a href="https://leetcode-cn.com/problems/house-robber-ii/">打家劫舍 II</a></h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</span><br></pre></td></tr></tbody></table></figure><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>环形排列意味着第一个房子和最后一个房子只能选一个，因此环状排列问题化为两个单排排列房间问题<ul><li>1.在不偷第一个房子的情况下<code>(nums[1:])</code>，最大金额是多少</li><li>2.在不偷最后一个房子的情况下<code>(nums[:n-1])</code>，最大金额是多少<br>以上两个情况的最大值，求出最终的最大金额</li></ul></li></ul><h4 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><h5 id="我写的"><a href="#我写的" class="headerlink" title="我写的"></a>我写的</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(nums)</span><br><span class="line">        nums0, nums1 = nums[:n-<span class="number">1</span>], nums[<span class="number">1</span>:]</span><br><span class="line">        first0,second0 = nums0[<span class="number">0</span>],<span class="built_in">max</span>(nums0[<span class="number">1</span>],nums0[<span class="number">0</span>])</span><br><span class="line">        first1,second1 = nums1[<span class="number">0</span>], <span class="built_in">max</span>(nums1[<span class="number">1</span>],nums1[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n-<span class="number">1</span>):</span><br><span class="line">            first0,second0 = second0, <span class="built_in">max</span>(second0,first0+nums0[i])</span><br><span class="line">            first1,second1 = second1, <span class="built_in">max</span>(second1,first1+nums1[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(second0,second1)</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n)</script>,其中 <script type="math/tex">n</script>是数组长度。只需要对数组遍历一次。 </li><li>空间复杂度：<script type="math/tex">O(1)</script>。使用滚动数组存储结果。</li></ul></li></ul><h5 id="大佬递归-（看起来更简洁）"><a href="#大佬递归-（看起来更简洁）" class="headerlink" title="大佬递归 （看起来更简洁）"></a>大佬递归 （看起来更简洁）</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">self, nums: [<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_rob</span>(<span class="params">nums</span>):</span></span><br><span class="line">            cur, pre = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">                cur, pre = <span class="built_in">max</span>(pre + num, cur), cur</span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(my_rob(nums[:-<span class="number">1</span>]),my_rob(nums[<span class="number">1</span>:])) <span class="keyword">if</span> <span class="built_in">len</span>(nums) != <span class="number">1</span> <span class="keyword">else</span> nums[<span class="number">0</span>] </span><br></pre></td></tr></tbody></table></figure><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n)</script>,其中 <script type="math/tex">n</script>是数组长度。只需要对数组遍历一次。 </li><li>空间复杂度：<script type="math/tex">O(1)</script> </li></ul></li></ul><h1 id="740-删除并获得点数-740-删除并获得点数"><a href="#740-删除并获得点数-740-删除并获得点数" class="headerlink" title="740. 删除并获得点数 740. 删除并获得点数"></a>740. 删除并获得点数 <a href="https://leetcode-cn.com/problems/delete-and-earn/">740. 删除并获得点数</a></h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组<code>nums</code>，你可以对它进行一些操作。<br>每次操作中，选择任意一个<code>nums[i]</code>，删除它并获得<code>nums[i]</code>的点数。之后，你必须删除每个等于<code>nums[i] - 1</code>或<code>nums[i] + 1</code>的元素。<br>开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。 </p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><ul><li>动态方程 <script type="math/tex">dp[i] = max(dp[i-1], dp[i-2] + nums[i])</script></li></ul><h2 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteAndEarn</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        dp = [<span class="number">0</span>]*(<span class="built_in">max</span>(nums) + <span class="number">1</span>)</span><br><span class="line">        nums.sort()</span><br><span class="line">        dict_nums = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            dict_nums[num] = dict_nums.get(num,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            dp[num] = num*dict_nums[num]</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">nums</span>):</span></span><br><span class="line">            len_nums = <span class="built_in">len</span>(nums)</span><br><span class="line">            first, second = nums[<span class="number">0</span>], <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, len_nums):</span><br><span class="line">                first, second = second , <span class="built_in">max</span>(first + nums[i], second)</span><br><span class="line">            <span class="keyword">return</span> second</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rob(dp)</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣算法" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode竞赛(第239场周赛)</title>
    <link href="http://watermelondrip.github.io/2021/05/02/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B239/"/>
    <id>http://watermelondrip.github.io/2021/05/02/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B239/</id>
    <published>2021-05-01T14:00:00.000Z</published>
    <updated>2021-05-04T17:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h1><p> <a href="https://leetcode-cn.com/problems/minimum-distance-to-the-target-element/">5746. Minimum Distance to the Target Element</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个整数数组 nums （下标 从 0 开始 计数）以及两个整数 target 和 start ，请你找出一个下标 i ，满足 nums[i] == target 且 abs(i - start) 最小化 。注意：abs(x) 表示 x 的绝对值。</p><p>返回 abs(i - start) 。</p><p>题目数据保证 target 存在于 nums 中。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,5], target = 5, start = 3</span><br><span class="line">输出：1</span><br><span class="line">解释：nums[4] = 5 是唯一一个等于 target 的值，所以答案是 abs(4 - 3) = 1 。 </span><br></pre></td></tr></tbody></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMinDistance</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span>, start: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        len_nums = <span class="built_in">len</span>(nums)</span><br><span class="line">        dp = [<span class="number">10000</span>] * len_nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_nums):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == target:</span><br><span class="line">                dp[i] = <span class="built_in">abs</span>(i-start)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp)</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(n)$  </li></ul><h1 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h1><p> <a href="https://leetcode-cn.com/problems/splitting-a-string-into-descending-consecutive-values/">1849. 将字符串拆分为递减的连续值</a></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个仅由数字组成的字符串 s 。</p><p>请你判断能否将 s 拆分成两个或者多个 非空子字符串 ，使子字符串的 数值 按 降序 排列，且每两个 相邻子字符串 的数值之 差 等于 1 。</p><p>例如，字符串 s = “0090089” 可以拆分成 [“0090”, “089”] ，数值为 [90,89] 。这些数值满足按降序排列，且相邻值相差 1 ，这种拆分方法可行。<br>另一个例子中，字符串 s = “001” 可以拆分成 [“0”, “01”]、[“00”, “1”] 或 [“0”, “0”, “1”] 。然而，所有这些拆分方法都不可行，因为对应数值分别是 [0,1]、[0,1] 和 [0,0,1] ，都不满足按降序排列的要求。<br>如果可以按要求拆分 s ，返回 true ；否则，返回 false 。</p><p>子字符串 是字符串中的一个连续字符序列。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "050043"</span><br><span class="line">输出：true</span><br><span class="line">解释：s 可以拆分为 ["05", "004", "3"] ，对应数值为 [5,4,3] 。</span><br><span class="line">满足按降序排列，且相邻值相差 1 。 </span><br></pre></td></tr></tbody></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>枚举第一个字符串</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitString</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        len_s = <span class="built_in">len</span>(s)</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,len_s+<span class="number">1</span>):</span><br><span class="line">            first = <span class="built_in">int</span>(s[:i])</span><br><span class="line">            l = i </span><br><span class="line">            r = i+<span class="number">1</span> </span><br><span class="line">            num = first <span class="comment">#第一个字符串</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> r &lt; len_s+<span class="number">1</span>:</span><br><span class="line">              </span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(s[l:r])== num - <span class="number">1</span>:</span><br><span class="line">                    num = num -<span class="number">1</span></span><br><span class="line">                    l,r = r, r+<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> num == <span class="number">0</span> <span class="keyword">and</span> r&lt;len_s+<span class="number">1</span>:</span><br><span class="line">                        num = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">int</span>(s[l:r]) &gt; num - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">int</span>(s[l:r]) &lt; num - <span class="number">1</span>:</span><br><span class="line">                    r+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l == len_s  <span class="keyword">and</span> num!=first:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n^2)$ 遍历一遍</li><li>空间复杂度：$O(1)$  </li></ul><h1 id="3-题目"><a href="#3-题目" class="headerlink" title="3. 题目"></a>3. 题目</h1><p> <a href="https://leetcode-cn.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/">1850. 邻位交换的最小次数串</a></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个表示大整数的字符串 num ，和一个整数 k 。</p><p>如果某个整数是 num 中各位数字的一个 排列 且它的 值大于 num ，则称这个整数为 妙数 。可能存在很多妙数，但是只需要关注 值最小 的那些。</p><p>例如，num = “5489355142” ：<br>第 1 个最小妙数是 “5489355214”<br>第 2 个最小妙数是 “5489355241”<br>第 3 个最小妙数是 “5489355412”<br>第 4 个最小妙数是 “5489355421”<br>返回要得到第 k 个 最小妙数 需要对 num 执行的 相邻位数字交换的最小次数 。</p><p>测试用例是按存在第 k 个最小妙数而生成的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：num = "5489355142", k = 4</span><br><span class="line">输出：2</span><br><span class="line">解释：第 4 个最小妙数是 "5489355421" ，要想得到这个数字：</span><br><span class="line">- 交换下标 7 和下标 8 对应的位："5489355142" -&gt; "5489355412"</span><br><span class="line">- 交换下标 8 和下标 9 对应的位："5489355412" -&gt; "5489355421" </span><br></pre></td></tr></tbody></table></figure><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ul><li>下一个排列</li></ul><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestBeautifulSubstring</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        output= <span class="number">0</span></span><br><span class="line">        list_word = <span class="built_in">list</span>(word)</span><br><span class="line">        yuanyin = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>]</span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word):</span><br><span class="line">            <span class="keyword">if</span> list_word[i] == <span class="string">'a'</span> <span class="keyword">and</span> step == <span class="number">1</span>:</span><br><span class="line">                res =<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'a'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span>:</span><br><span class="line">                    step = <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span> <span class="keyword">and</span> step == <span class="number">2</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span>:</span><br><span class="line">                    step = <span class="number">3</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span> <span class="keyword">and</span> step == <span class="number">3</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span>:</span><br><span class="line">                    step = <span class="number">4</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span> <span class="keyword">and</span> step == <span class="number">4</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span>:</span><br><span class="line">                    step = <span class="number">5</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span> <span class="keyword">and</span> step == <span class="number">5</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line">                output= <span class="built_in">max</span>(output,res)</span><br><span class="line">                 </span><br><span class="line">             </span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            output= <span class="built_in">max</span>(output,res)</span><br><span class="line">        <span class="keyword">if</span> output&lt;<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(1)$ </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣周赛" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://watermelondrip.github.io/2021/04/29/%E9%93%BE%E8%A1%A8/"/>
    <id>http://watermelondrip.github.io/2021/04/29/%E9%93%BE%E8%A1%A8/</id>
    <published>2021-04-28T15:16:00.000Z</published>
    <updated>2021-04-29T01:24:02.930Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>链表<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md#7-%E9%93%BE%E8%A1%A8%E6%B1%82%E5%92%8C">刷题顺序</a></p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><ul><li>Important notice: 涉及到链表的操作，一定要在纸上把过程先画出来，再写程序！不要断链子。</li><li>小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。</li></ul><ul><li>注意<a href="https://zhuanlan.zhihu.com/p/53691100">防止锻链</a>，因为一旦把节点的指针反向了，当前的指针就不再指向下一个节点了，因为也就i不能再继续往后遍历了，也就不能把这个完整的链表进行反转了，这种情况称作断链。为了解决断链的情况，我们就需要再节点指针反向之前，就把当前节点的下一个节点先记下来，等到当前节点的指针完成反转之后，遍历指针直接移动到刚刚被记住的那个节点，这样就能防止锻炼的情况了。具体操作如下：<a href="https://zhuanlan.zhihu.com/p/53691100">讲解1</a></li><li></li><li>注意：我们经常需要定义一个哨兵节点<code>prehead</code>，这可以在最后让我们比较容易地返回合并后的链表。</li></ul><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol><li>双指针：</li><li>栈：</li></ol><h1 id="剑指Offer"><a href="#剑指Offer" class="headerlink" title="剑指Offer"></a>剑指Offer</h1><p>剑指 Offer 25. 合并两个排序的链表</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        head = ListNode()</span><br><span class="line">        tmp = head</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val&gt; l2.val:</span><br><span class="line">                tmp.<span class="built_in">next</span> = l2</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">                tmp = tmp.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp.<span class="built_in">next</span> = l1</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">                tmp = tmp.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            tmp.<span class="built_in">next</span> = l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.<span class="built_in">next</span> = l2</span><br><span class="line">        <span class="keyword">return</span> head.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  其中 nn 是链表的长度。需要遍历链表一次。</li><li>空间复杂度：<script type="math/tex">O(1)</script>。</li></ul></li></ul><p>剑指 Offer 22. 链表中倒数第k个节点</p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getKthFromEnd</span>(<span class="params">self, head: ListNode, k: <span class="built_in">int</span></span>) -&gt; ListNode:</span></span><br><span class="line">        cur_pre = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            cur_pre = cur_pre.<span class="built_in">next</span></span><br><span class="line">            k -=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur_pre:</span><br><span class="line">            cur_pre =cur_pre.<span class="built_in">next</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  其中 nn 是链表的长度。需要遍历链表一次。</li><li>空间复杂度：<script type="math/tex">O(n)</script>。</li></ul></li></ul><h2 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a>剑指 Offer 24. 反转链表</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        cur = head</span><br><span class="line">        cur_next = cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        cur_pre = <span class="literal">None</span> </span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            cur.<span class="built_in">next</span> = cur_pre</span><br><span class="line">            cur_pre = cur</span><br><span class="line">            cur = cur_next</span><br><span class="line">            <span class="keyword">if</span> cur_next:</span><br><span class="line">                cur_next = cur_next.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> cur_pre </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  其中 nn 是链表的长度。需要遍历链表一次。</li><li>空间复杂度：<script type="math/tex">O(1)</script>。</li></ul></li></ul><h2 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a>剑指 Offer 06. 从尾到头打印链表</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></tbody></table></figure><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-3"><a href="#Python3-Code-3" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversePrint</span>(<span class="params">self, head: ListNode</span>) -&gt; List[int]:</span></span><br><span class="line">         </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">print_list</span>(<span class="params">node</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            <span class="keyword">return</span> print_list(node.<span class="built_in">next</span>) +[node.val]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> print_list(head)</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(n)</script>。</li></ul></li></ul><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="1-LC160-相交链表-相交链表"><a href="#1-LC160-相交链表-相交链表" class="headerlink" title="1. (LC160) 相交链表 相交链表"></a>1. (LC160) 相交链表 <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/">相交链表</a></h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>编写一个程序，找到两个单链表相交的起始节点。</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>图解</li></ol><p><img src= "/img/watermelon.gif" data-lazy-src="https://pic.leetcode-cn.com/1614527163-BKaiqs-Picture1.png" alt=""></p><ol><li>数学思维</li></ol><ul><li>我们假设<code>A</code>的头节点到交汇点的距离为<code>a</code>， <code>B</code>的头节点到交汇点的距离为<code>b</code>，交会点最后的距离为<code>c</code>。</li><li><code>A</code>指针<code>cur_A</code>总共走了<code>a+b-c</code>步，<code>B</code>指针<code>cur_B</code>总共走了<code>b+a-c</code>步，所以会两个指针相同，达到终止条件。当没有交点的时候，<code>A</code>指针<code>cur_A</code>总共走了<code>a+b</code>步，<code>B</code>指针<code>cur_B</code>总共走了<code>b+a</code>步，也会两个指针相同指向null，达到终止条件。</li></ul><ol><li>思路总结</li></ol><ul><li>链表来说，首先是先动手走一走，再一个如果碰到交点问题，要看看怎么才能得到一个等式。</li></ul><h3 id="Python3-Code-4"><a href="#Python3-Code-4" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span>  <span class="comment">#双指针</span></span><br><span class="line">        cur_A = headA</span><br><span class="line">        cur_B = headB</span><br><span class="line">        <span class="keyword">while</span> cur_A != cur_B:</span><br><span class="line">            cur_A = cur_A.<span class="built_in">next</span> <span class="keyword">if</span> cur_A <span class="keyword">else</span> headB</span><br><span class="line">            cur_B = cur_B.<span class="built_in">next</span> <span class="keyword">if</span> cur_B <span class="keyword">else</span> headA</span><br><span class="line">        <span class="keyword">return</span> cur_A</span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：$O(n+m)$ n是链表A的长度，m是链表B的长度  </li><li>空间复杂度：$O(1)$  </li></ul><h2 id="2-LC2206-反转链表-反转链表"><a href="#2-LC2206-反转链表-反转链表" class="headerlink" title="2. (LC2206) 反转链表 反转链表"></a>2. (LC2206) 反转链表 <a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p>反转一个单链表。</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><ol><li>双指针：为了防止断链子，要保持下一个节点<code>temp</code>和前一个节点<code>pre</code></li><li>递归：和双指针是一样的逻辑，同样是当<code>cur</code>为空的时候循环结束，不断将<code>cur</code>指向<code>pre</code>的过程。递归的这个好绕啊，第一遍没太理解，先记下来吧。一个很好的解释，慢慢理解，<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/">戳这里</a></li><li>栈：最简单的一种方式就是使用栈，因为栈是先进后出的，实现原理是把链表点一个个入栈，当全部入栈之后在一个个出栈，出栈的时候在把出栈的结点串成一个新的链表。</li></ol><h3 id="Python3-Code-5"><a href="#Python3-Code-5" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span> <span class="comment">#双指针</span></span><br><span class="line">        cur = head</span><br><span class="line">        pre = <span class="literal">None</span>        </span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            temp = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span> <span class="comment">#递归</span></span><br><span class="line"><span class="comment"># 递归终止条件是当前为空，或者下一个节点为空</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">None</span> <span class="keyword">or</span> head.<span class="built_in">next</span>==<span class="literal">None</span>):</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line"><span class="comment"># 这里的cur就是最后一个节点</span></span><br><span class="line">cur = self.reverseList(head.<span class="built_in">next</span>)</span><br><span class="line"><span class="comment"># 这里请配合动画演示理解</span></span><br><span class="line"><span class="comment"># 如果链表是 1-&gt;2-&gt;3-&gt;4-&gt;5，那么此时的cur就是5</span></span><br><span class="line"><span class="comment"># 而head是4，head的下一个是5，下下一个是空</span></span><br><span class="line"><span class="comment"># 所以head.next.next 就是5-&gt;4</span></span><br><span class="line">head.<span class="built_in">next</span>.<span class="built_in">next</span> = head</span><br><span class="line"><span class="comment"># 防止链表循环，需要将head.next设置为空</span></span><br><span class="line">head.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 每层递归函数都返回cur，也就是最后一个节点</span></span><br><span class="line"><span class="keyword">return</span> cur </span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        stack = [<span class="literal">None</span>]</span><br><span class="line">        <span class="comment"># 把链表节点全部放到栈中</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            stack.append(head)</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        head = stack.pop()</span><br><span class="line">        cur = head</span><br><span class="line">        <span class="comment"># 栈中的结点全部出栈，然后重新连成一个新的链表</span></span><br><span class="line">        <span class="keyword">while</span> stack: </span><br><span class="line">            cur.<span class="built_in">next</span> = stack.pop()</span><br><span class="line">            cur =cur.<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 最后一个结点就是反转前的头结点，一定要让他的next</span></span><br><span class="line">        <span class="comment"># 等于空，否则会构成环</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：$O( )$ n是链表的长度，  </li><li>空间复杂度：$O( )$  </li></ul><h2 id="3-LC21-合并两个有序链表-合并两个有序链表"><a href="#3-LC21-合并两个有序链表-合并两个有序链表" class="headerlink" title="3. (LC21) 合并两个有序链表 合并两个有序链表"></a>3. (LC21) 合并两个有序链表 <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a></h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><ol><li>迭代<ul><li>首先，我们设定一个哨兵节点<code>prehead</code>，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个<code>prev</code>指针，我们需要做的是调整它的<code>next</code>指针。然后我们重复以下过程，直到<code>l1</code>或者<code>l2</code>指向<code>null</code>。在循环终止的时候，<code>l1</code>和<code>l2</code>至多有一个是非空的。</li></ul></li><li>递归</li></ol><h3 id="Python3-Code-6"><a href="#Python3-Code-6" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    dummy = ListNode()</span><br><span class="line">    cur = dummy </span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">            cur.<span class="built_in">next</span> = l1</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur.<span class="built_in">next</span> = l2</span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    cur.<span class="built_in">next</span> = l1 <span class="keyword">if</span> l1 <span class="keyword">else</span> l2</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：$O(n+m)$, 其中n和m个链表长度</li><li>空间复杂度：$O(1)$  </li></ul><h2 id="4-LC83-从有序链表中删除重复节点-从有序链表中删除重复节点"><a href="#4-LC83-从有序链表中删除重复节点-从有序链表中删除重复节点" class="headerlink" title="4. (LC83) 从有序链表中删除重复节点 从有序链表中删除重复节点"></a>4. (LC83) 从有序链表中删除重复节点 <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/">从有序链表中删除重复节点</a></h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;2</span><br><span class="line">输出: 1-&gt;2</span><br></pre></td></tr></tbody></table></figure><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-7"><a href="#Python3-Code-7" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        cur = head</span><br><span class="line">        curnext = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">and</span> curnext:</span><br><span class="line">            <span class="keyword">if</span> cur.val == curnext.val:</span><br><span class="line">                curnext = curnext.<span class="built_in">next</span></span><br><span class="line">                cur.<span class="built_in">next</span> = curnext    </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = curnext</span><br><span class="line">                curnext = curnext.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：$O(n)$ n是链表的长度。因为列表中的每个节点都检查一次以确定它是否重复，所以总运行时间为$O(n)$</li><li>空间复杂度：$O(1)$，没有使用额外的空间</li></ul><h3 id="LC19-删除链表的倒数第-N-个结点-删除链表的倒数第-N-个结点"><a href="#LC19-删除链表的倒数第-N-个结点-删除链表的倒数第-N-个结点" class="headerlink" title="(LC19)删除链表的倒数第 N 个结点   删除链表的倒数第 N 个结点"></a>(LC19)删除链表的倒数第 N 个结点   <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第 N 个结点</a></h3><h4 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h4><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。<br>进阶：你能尝试使用一趟扫描实现吗？<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-8"><a href="#Python3-Code-8" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC2-两数相加-2-两数相加"><a href="#LC2-两数相加-2-两数相加" class="headerlink" title="(LC2. 两数相加)     2. 两数相加 "></a>(LC2. 两数相加)    <a href="https://leetcode-cn.com/problems/add-two-numbers/"> 2. 两数相加 </a></h3><h4 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h4><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></tbody></table></figure><h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-9"><a href="#Python3-Code-9" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-1"><a href="#大佬题解-1" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC"><a href="#LC" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h3><h4 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-10"><a href="#Python3-Code-10" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-2"><a href="#大佬题解-2" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC-1"><a href="#LC-1" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h3><h4 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-11"><a href="#Python3-Code-11" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-3"><a href="#大佬题解-3" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC-2"><a href="#LC-2" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h3><h4 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-12"><a href="#Python3-Code-12" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-4"><a href="#大佬题解-4" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC-3"><a href="#LC-3" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h3><h4 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-13"><a href="#Python3-Code-13" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-5"><a href="#大佬题解-5" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC-4"><a href="#LC-4" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h3><h4 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-14"><a href="#Python3-Code-14" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-6"><a href="#大佬题解-6" class="headerlink" title="大佬题解"></a>大佬题解</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据类型" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/tags/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据结构" scheme="http://watermelondrip.github.io/tags/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode竞赛(第238场周赛)</title>
    <link href="http://watermelondrip.github.io/2021/04/25/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B238/"/>
    <id>http://watermelondrip.github.io/2021/04/25/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B238/</id>
    <published>2021-04-24T14:00:00.000Z</published>
    <updated>2021-04-25T14:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h1><p> <a href="https://leetcode-cn.com/problems/sum-of-digits-in-base-k/">5738. K 进制表示下的各位数字总和</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个整数 n（10 进制）和一个基数 k ，请你将 n 从 10 进制表示转换为 k 进制表示，计算并返回转换后各位数字的 总和 。</p><p>转换后，各位数字应当视作是 10 进制数字，且它们的总和也应当按 10 进制表示返回。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 34, k = 6</span><br><span class="line">输出：9</span><br><span class="line">解释：34 (10 进制) 在 6 进制下表示为 54 。5 + 4 = 9 。</span><br></pre></td></tr></tbody></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumBase</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            res1 = n%k</span><br><span class="line">            res2 = n//k</span><br><span class="line">     </span><br><span class="line">            n = res2</span><br><span class="line">            res += res1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(1)$  </li></ul><h1 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h1><p> <a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">5739. 最高频元素的频数</a></p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>元素的 频数 是该元素在一个数组中出现的次数。</p><p>给你一个整数数组 nums 和一个整数 k 。在一步操作中，你可以选择 nums 的一个下标，并将该下标对应元素的值增加 1 。</p><p>执行最多 k 次操作后，返回数组中最高频元素的 最大可能频数 。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,4], k = 5</span><br><span class="line">输出：3</span><br><span class="line">解释：对第一个元素执行 3 次递增操作，对第二个元素执 2 次递增操作，此时 nums = [4,4,4] 。</span><br><span class="line">4 是数组中最高频元素，频数是 3 。 </span><br></pre></td></tr></tbody></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>双指针</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxFrequency</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            total += (nums[r] - nums[r - <span class="number">1</span>]) * (r - l)</span><br><span class="line">            <span class="keyword">while</span> total &gt; k:</span><br><span class="line">                total -= nums[r] - nums[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            res = <span class="built_in">max</span>(res, r - l + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><p>-时间复杂度：$ O(nlogn)$，排序数组的时间复杂度为 $O(nlogn)$，使用双指针遍历目标值的时间复杂度为$O(n)$。</p><ul><li>空间复杂度：$O(logn)$，即为排序数组需要使用的栈空间。</li></ul><h1 id="3-题目"><a href="#3-题目" class="headerlink" title="3. 题目"></a>3. 题目</h1><p> <a href="https://leetcode-cn.com/problems/longest-substring-of-all-vowels-in-order/">5740. 所有元音按顺序排布的最长子字符串</a></p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>当一个字符串满足如下条件时，我们称它是 美丽的 ：</p><p>所有 5 个英文元音字母（’a’ ，’e’ ，’i’ ，’o’ ，’u’）都必须 至少 出现一次。<br>这些元音字母的顺序都必须按照 字典序 升序排布（也就是说所有的 ‘a’ 都在 ‘e’ 前面，所有的 ‘e’ 都在 ‘i’ 前面，以此类推）<br>比方说，字符串 “aeiou” 和 “aaaaaaeiiiioou” 都是 美丽的 ，但是 “uaeio” ，”aeoiu” 和 “aaaeeeooo” 不是美丽的 。</p><p>给你一个只包含英文元音字母的字符串 word ，请你返回 word 中 最长美丽子字符串的长度 。如果不存在这样的子字符串，请返回 0 。</p><p>子字符串 是字符串中一个连续的字符序列。  </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：word = "aeiaaioaaaaeiiiiouuuooaauuaeiu"</span><br><span class="line">输出：13</span><br><span class="line">解释：最长子字符串是 "aaaaeiiiiouuu" ，长度为 13 。 </span><br></pre></td></tr></tbody></table></figure><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><ul><li>语言支持：Python3</li></ul><p>Python3 Code:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestBeautifulSubstring</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        output= <span class="number">0</span></span><br><span class="line">        list_word = <span class="built_in">list</span>(word)</span><br><span class="line">        yuanyin = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>]</span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word):</span><br><span class="line">            <span class="keyword">if</span> list_word[i] == <span class="string">'a'</span> <span class="keyword">and</span> step == <span class="number">1</span>:</span><br><span class="line">                res =<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'a'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span>:</span><br><span class="line">                    step = <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span> <span class="keyword">and</span> step == <span class="number">2</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'e'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span>:</span><br><span class="line">                    step = <span class="number">3</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span> <span class="keyword">and</span> step == <span class="number">3</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'i'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span>:</span><br><span class="line">                    step = <span class="number">4</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span> <span class="keyword">and</span> step == <span class="number">4</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'o'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span>:</span><br><span class="line">                    step = <span class="number">5</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    res =<span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span> <span class="keyword">and</span> step == <span class="number">5</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(list_word) <span class="keyword">and</span> list_word[i] == <span class="string">'u'</span>:</span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line">                    res +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    step = <span class="number">1</span></span><br><span class="line">                    i-=<span class="number">1</span></span><br><span class="line">                output= <span class="built_in">max</span>(output,res)</span><br><span class="line">                 </span><br><span class="line">             </span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            output= <span class="built_in">max</span>(output,res)</span><br><span class="line">        <span class="keyword">if</span> output&lt;<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p><ul><li>时间复杂度：$O(n)$ 遍历一遍</li><li>空间复杂度：$O(1)$ </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣周赛" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B/"/>
    
    
    <category term="python" scheme="http://watermelondrip.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="http://watermelondrip.github.io/2021/04/16/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <id>http://watermelondrip.github.io/2021/04/16/%E5%8D%95%E8%B0%83%E6%A0%88/</id>
    <published>2021-04-16T00:22:00.000Z</published>
    <updated>2021-05-15T05:39:44.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id=""><a href="#" class="headerlink" title="( )     "></a>( )    <a href=""> </a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( )$  </li><li>空间复杂度：$O()$  </li></ul></li></ul><h3 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h3>]]></content>
    
    
    <summary type="html">栈的顺序为后进先出，而队列的顺序为先进先出。</summary>
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据类型" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>栈和队列</title>
    <link href="http://watermelondrip.github.io/2021/04/16/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://watermelondrip.github.io/2021/04/16/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2021-04-16T00:22:00.000Z</published>
    <updated>2021-05-08T02:02:03.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>栈和队列<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97.md#leetcode-%E9%A2%98%E8%A7%A3---%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97">刷题顺序</a></p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈是一个线性的数据结构，存储数据的方式是Last-In/First-Out(LIFO)先进后出。在栈里，每个新元素从一个end加入，也只能从这个end移除。这个加入和删除的操作经常就叫做<strong>push</strong> 和<strong>pop</strong>。<br>和栈有关的功能是：<br>（1) <code>empty()</code> : 返回stack是否是空 - 时间复杂度<script type="math/tex">O(1)</script><br>（2) <code>size()</code> : 返回stack的长度  - 时间复杂度<script type="math/tex">O(1)</script><br>（3) <code>push()</code> : 加入元素到stack里  - 时间复杂度<script type="math/tex">O(1)</script><br>（4) <code>pop()</code> :  - 时间复杂度<script type="math/tex">O(1)</script></p><p><a href="https://www.geeksforgeeks.org/stack-in-python/">实现方式</a>：list,collections.deque,queue.LifoQueue </p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>一个栈，里面的元素的大小按照他们所在栈的位置，满足一定的单调性。与单调队列相比，其只在一段进行进出。</p><h3 id="如何使用单调栈"><a href="#如何使用单调栈" class="headerlink" title="如何使用单调栈"></a>如何使用单调栈</h3><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h2 id="大佬解释"><a href="#大佬解释" class="headerlink" title="大佬解释"></a>大佬解释</h2><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id="LC232-用栈实现队列-用栈实现队列-经典"><a href="#LC232-用栈实现队列-用栈实现队列-经典" class="headerlink" title="(LC232)  用栈实现队列  用栈实现队列 经典"></a>(LC232)  用栈实现队列  <a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">用栈实现队列</a> <strong>经典</strong></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实如果def里有self，下面的赋值里就有self.是一致的</p><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack1 = [] <span class="comment"># input stack</span></span><br><span class="line">        self.stack2 = [] <span class="comment"># output stack</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Push element x to the back of queue.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack1.append(x)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack2:</span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">        <span class="keyword">return</span> self.stack2.pop()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get the front element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack2:</span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">        <span class="keyword">return</span> self.stack2[-<span class="number">1</span>] </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>) -&gt; bool:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns whether the queue is empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.stack1 <span class="keyword">and</span> <span class="keyword">not</span> self.stack2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyQueue()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h3><h2 id="LC225-用队列实现栈-用队列实现栈-经典"><a href="#LC225-用队列实现栈-用队列实现栈-经典" class="headerlink" title="(LC225)  用队列实现栈   用队列实现栈  经典"></a>(LC225)  用队列实现栈  <a href="https://leetcode-cn.com/problems/implement-stack-using-queues/description/"> 用队列实现栈</a>  <strong>经典</strong></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通队列的全部四种操作（push、top、pop 和 empty）。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.queue1 = []</span><br><span class="line">        self.queue2 = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Push element x onto stack.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.queue2.append(x)</span><br><span class="line">        <span class="keyword">while</span> self.queue1: </span><br><span class="line">            self.queue2.append(self.queue1.pop(<span class="number">0</span>))</span><br><span class="line">            </span><br><span class="line">        self.queue1,self.queue2 = self.queue2,self.queue1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.queue1.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get the top element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.queue1[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>) -&gt; bool:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns whether the stack is empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.queue1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O(n)$  </li><li>空间复杂度：$O(n)$  </li></ul></li></ul><h3 id="大佬题解-1"><a href="#大佬题解-1" class="headerlink" title="大佬题解"></a>大佬题解</h3><h2 id="LC42-42-接雨水接雨水"><a href="#LC42-42-接雨水接雨水" class="headerlink" title="(LC42)42. 接雨水接雨水"></a>(LC42)42. 接雨水<a href="https://leetcode-cn.com/problems/trapping-rain-water/">接雨水</a></h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ul><li>单调栈<h3 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span>(<span class="params">self, height: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># 单调栈</span></span><br><span class="line">        stack = <span class="built_in">list</span>()</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i , h <span class="keyword">in</span> <span class="built_in">enumerate</span>(height):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> h &gt; height[stack[-<span class="number">1</span>]]:</span><br><span class="line">                top = stack.pop(-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">               </span><br><span class="line">                cur_height = <span class="built_in">min</span>(h,height[stack[-<span class="number">1</span>]]) - height[top]</span><br><span class="line">                cur_width = i - stack[-<span class="number">1</span>]- <span class="number">1</span></span><br><span class="line">                 </span><br><span class="line">                res += cur_height*cur_width</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><h2 id="LC155-最小栈-最小栈"><a href="#LC155-最小栈-最小栈" class="headerlink" title="(LC155 ) 最小栈   最小栈"></a>(LC155 ) 最小栈   <a href="https://leetcode-cn.com/problems/min-stack/description/">最小栈</a></h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-3"><a href="#Python3-Code-3" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        self.min_stack = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.stack.append(val)</span><br><span class="line">        <span class="keyword">if</span> self.min_stack:</span><br><span class="line">            self.min_stack.append(<span class="built_in">min</span>(val,self.min_stack[-<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.min_stack.append(val)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.stack.pop(-<span class="number">1</span>)</span><br><span class="line">        self.min_stack.pop(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.min_stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MinStack()</span></span><br><span class="line"><span class="comment"># obj.push(val)</span></span><br><span class="line"><span class="comment"># obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.getMin()</span></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O(n)$  </li><li>空间复杂度：$O(n)$  </li></ul></li></ul><h3 id="大佬题解-2"><a href="#大佬题解-2" class="headerlink" title="大佬题解"></a>大佬题解</h3><h2 id="LC20-有效的括号-有效的括号"><a href="#LC20-有效的括号-有效的括号" class="headerlink" title="(LC20)   有效的括号  有效的括号 "></a>(LC20)   有效的括号 <a href="https://leetcode-cn.com/problems/valid-parentheses/description/"> 有效的括号 </a></h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。<br>有效字符串需满足：左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "()"</span><br><span class="line">输出：true</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-4"><a href="#Python3-Code-4" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        stack = []</span><br><span class="line">        s = <span class="built_in">list</span>(s) </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> s:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                stack.append(s.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = s.pop(<span class="number">0</span>)  </span><br><span class="line">                <span class="keyword">if</span> tmp == <span class="string">')'</span>:</span><br><span class="line">                    <span class="keyword">if</span> stack[-<span class="number">1</span>] != <span class="string">'('</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    stack.pop(-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">elif</span> tmp == <span class="string">']'</span>:</span><br><span class="line">                    <span class="keyword">if</span> stack[-<span class="number">1</span>] != <span class="string">'['</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    stack.pop(-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">elif</span> tmp == <span class="string">'}'</span>:</span><br><span class="line">                    <span class="keyword">if</span> stack[-<span class="number">1</span>] != <span class="string">'{'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    stack.pop(-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack.append(tmp)</span><br><span class="line">               </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> s <span class="keyword">and</span> <span class="keyword">not</span> stack</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O(n )$  </li><li>空间复杂度：$O(n)$  </li></ul></li></ul><h3 id="大佬题解-3"><a href="#大佬题解-3" class="headerlink" title="大佬题解"></a>大佬题解</h3><h2 id="LC739-每日温度-每日温度"><a href="#LC739-每日温度-每日温度" class="headerlink" title="(LC739 )  每日温度   每日温度 "></a>(LC739 )  每日温度  <a href="https://leetcode-cn.com/problems/daily-temperatures/description/"> 每日温度 </a></h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><p>请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p><p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 </p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><ul><li>单调栈</li></ul><h3 id="Python3-Code-5"><a href="#Python3-Code-5" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span>(<span class="params">self, T: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        mono_stack = []</span><br><span class="line">        result = [<span class="number">0</span>]*<span class="built_in">len</span>(T)</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span> i,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(T):</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mono_stack:</span><br><span class="line">                tmp = T[i]</span><br><span class="line">                mono_stack.append([i,tmp])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = T[i]</span><br><span class="line">                mono_stack.append([i,tmp])</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span> tmp&gt; mono_stack[-<span class="number">2</span>][<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">while</span> <span class="built_in">len</span>(mono_stack)&gt;<span class="number">1</span> <span class="keyword">and</span> tmp&gt; mono_stack[-<span class="number">2</span>][<span class="number">1</span>]:</span><br><span class="line">                        result[mono_stack[-<span class="number">2</span>][<span class="number">0</span>]]=i-mono_stack[-<span class="number">2</span>][<span class="number">0</span>] </span><br><span class="line">                        mono_stack.pop(-<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O(n+m)$ n是链表A的长度，m是链表B的长度  </li><li>空间复杂度：$O(1)$  </li></ul></li></ul><h3 id="大佬题解-4"><a href="#大佬题解-4" class="headerlink" title="大佬题解"></a>大佬题解</h3><h2 id="LC503-下一个更大元素-II"><a href="#LC503-下一个更大元素-II" class="headerlink" title="(LC503 )  下一个更大元素 II"></a>(LC503 )  下一个更大元素 II</h2><p>  <a href="https://leetcode-cn.com/problems/next-greater-element-ii/description/"> 下一个更大元素 II </a></p><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><ul><li>单调栈</li></ul><h3 id="Python3-Code-6"><a href="#Python3-Code-6" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span>(<span class="params">self, T: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        mono_stack = []</span><br><span class="line">        result = [<span class="number">0</span>]*<span class="built_in">len</span>(T)</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span> i,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(T):</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mono_stack:</span><br><span class="line">                tmp = T[i]</span><br><span class="line">                mono_stack.append([i,tmp])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = T[i]</span><br><span class="line">                mono_stack.append([i,tmp])</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span> tmp&gt; mono_stack[-<span class="number">2</span>][<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">while</span> <span class="built_in">len</span>(mono_stack)&gt;<span class="number">1</span> <span class="keyword">and</span> tmp&gt; mono_stack[-<span class="number">2</span>][<span class="number">1</span>]:</span><br><span class="line">                        result[mono_stack[-<span class="number">2</span>][<span class="number">0</span>]]=i-mono_stack[-<span class="number">2</span>][<span class="number">0</span>] </span><br><span class="line">                        mono_stack.pop(-<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O(n+m)$ n是链表A的长度，m是链表B的长度  </li><li>空间复杂度：$O(1)$  </li></ul></li></ul><h3 id="大佬题解-5"><a href="#大佬题解-5" class="headerlink" title="大佬题解"></a>大佬题解</h3>]]></content>
    
    
    <summary type="html">栈的顺序为后进先出，而队列的顺序为先进先出。</summary>
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据类型" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>模板</title>
    <link href="http://watermelondrip.github.io/2021/04/16/%E6%A8%A1%E6%9D%BF/"/>
    <id>http://watermelondrip.github.io/2021/04/16/%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-04-16T00:22:00.000Z</published>
    <updated>2021-05-15T05:38:17.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id=""><a href="#" class="headerlink" title="( )     "></a>( )    <a href=""> </a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( )$  </li><li>空间复杂度：$O()$  </li></ul></li></ul><h3 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://watermelondrip.github.io/2021/04/16/%E6%A0%88/"/>
    <id>http://watermelondrip.github.io/2021/04/16/%E6%A0%88/</id>
    <published>2021-04-16T00:22:00.000Z</published>
    <updated>2021-05-26T06:56:08.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈是一个线性的数据结构，存储数据的方式是Last-In/First-Out(LIFO)先进后出。在栈里，每个新元素从一个end加入，也只能从这个end移除。这个加入和删除的操作经常就叫做<strong>push</strong> 和<strong>pop</strong>。<br>和栈有关的功能是：<br>（1) <code>empty()</code> : 返回stack是否是空 - 时间复杂度<script type="math/tex">O(1)</script><br>（2) <code>size()</code> : 返回stack的长度  - 时间复杂度<script type="math/tex">O(1)</script><br>（3) <code>push()</code> : 加入元素到stack里  - 时间复杂度<script type="math/tex">O(1)</script><br>（4) <code>pop()</code> :  - 时间复杂度<script type="math/tex">O(1)</script></p><p><a href="https://www.geeksforgeeks.org/stack-in-python/">实现方式</a>：list,collections.deque,queue.LifoQueue </p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>一个栈，里面的元素的大小按照他们所在栈的位置，满足一定的单调性。与单调队列相比，其只在一段进行进出。</p><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h2 id="大佬解释"><a href="#大佬解释" class="headerlink" title="大佬解释"></a>大佬解释</h2><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id="1190-反转每对括号间的子串-1190-反转每对括号间的子串"><a href="#1190-反转每对括号间的子串-1190-反转每对括号间的子串" class="headerlink" title="1190. 反转每对括号间的子串 1190. 反转每对括号间的子串 "></a>1190. 反转每对括号间的子串 <a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/">1190. 反转每对括号间的子串 </a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出一个字符串 s（仅含有小写英文字母和括号）。</p><p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p><p>注意，您的结果中 不应 包含任何括号。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：s = "(abcd)"</span><br><span class="line">输出："dcba"</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>匹配符号这种的题，第一个想法就是栈</li></ul><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseParentheses</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">        que = <span class="built_in">list</span>()</span><br><span class="line">        str_tmp = <span class="built_in">str</span>()</span><br><span class="line">        len_s = <span class="built_in">len</span>(s)</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len_s:</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">'('</span>:</span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">                   <span class="comment"># print(que)</span></span><br><span class="line">                    que.append(str_tmp)</span><br><span class="line">                    str_tmp = <span class="string">''</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">elif</span> s[i] != <span class="string">'('</span> <span class="keyword">and</span> s[i] != <span class="string">')'</span>:</span><br><span class="line">                str_tmp+=s[i]</span><br><span class="line">            <span class="keyword">elif</span> s[i] == <span class="string">')'</span>:</span><br><span class="line">                str_tmp = str_tmp[::-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> que:</span><br><span class="line">                    str_tmp =  que.pop()+ str_tmp  </span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> str_tmp</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O(n^2)$  </li><li>空间复杂度：$O(n)$  </li></ul></li></ul><h3 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h3><h2 id=""><a href="#" class="headerlink" title="( )      "></a>( )     <a href=""> </a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-1"><a href="#大佬题解-1" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-2"><a href="#大佬题解-2" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-3"><a href="#Python3-Code-3" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-3"><a href="#大佬题解-3" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-4"><a href="#Python3-Code-4" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-4"><a href="#大佬题解-4" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-5"><a href="#Python3-Code-5" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-5"><a href="#大佬题解-5" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-6"><a href="#Python3-Code-6" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-6"><a href="#大佬题解-6" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-7"><a href="#Python3-Code-7" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-7"><a href="#大佬题解-7" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-8"><a href="#Python3-Code-8" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-8"><a href="#大佬题解-8" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-9"><a href="#Python3-Code-9" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-9"><a href="#大佬题解-9" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-10"><a href="#Python3-Code-10" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-10"><a href="#大佬题解-10" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-11"><a href="#Python3-Code-11" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-11"><a href="#大佬题解-11" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-12"><a href="#Python3-Code-12" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-12"><a href="#大佬题解-12" class="headerlink" title="大佬题解##  ( )      "></a>大佬题解##  ( )     <a href=""> </a></h3><h3 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h3><h3 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-13"><a href="#Python3-Code-13" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析  <ul><li>时间复杂度：$O( 1)$  </li><li>空间复杂度：$O(N)$  </li></ul></li></ul><h3 id="大佬题解-13"><a href="#大佬题解-13" class="headerlink" title="大佬题解"></a>大佬题解</h3>]]></content>
    
    
    <summary type="html">栈的顺序为后进先出</summary>
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据类型" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>数组与矩阵</title>
    <link href="http://watermelondrip.github.io/2021/04/12/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/"/>
    <id>http://watermelondrip.github.io/2021/04/12/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</id>
    <published>2021-04-11T14:00:00.000Z</published>
    <updated>2021-04-13T02:18:27.574Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5.md">刷题顺序</a></p><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h2 id="大佬"><a href="#大佬" class="headerlink" title="大佬"></a>大佬</h2><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id="LC283-移动零-移动零"><a href="#LC283-移动零-移动零" class="headerlink" title="(LC283) 移动零    移动零 "></a>(LC283) 移动零   <a href="https://leetcode-cn.com/problems/move-zeroes/description/"> 移动零 </a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br>Given an integer array nums, move all 0’s to the end of it while maintaining the relative order of the non-zero elements.<br>Note that you must do this in-place without making a copy of the array </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></tbody></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC"><a href="#LC" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-1"><a href="#大佬题解-1" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-1"><a href="#LC-1" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-2"><a href="#大佬题解-2" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-2"><a href="#LC-2" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-3"><a href="#Python3-Code-3" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-3"><a href="#大佬题解-3" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-3"><a href="#LC-3" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-4"><a href="#Python3-Code-4" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-4"><a href="#大佬题解-4" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-4"><a href="#LC-4" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-5"><a href="#Python3-Code-5" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-5"><a href="#大佬题解-5" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-5"><a href="#LC-5" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-6"><a href="#Python3-Code-6" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-6"><a href="#大佬题解-6" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-6"><a href="#LC-6" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-7"><a href="#Python3-Code-7" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-7"><a href="#大佬题解-7" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-7"><a href="#LC-7" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-8"><a href="#Python3-Code-8" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-8"><a href="#大佬题解-8" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-8"><a href="#LC-8" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-9"><a href="#Python3-Code-9" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-9"><a href="#大佬题解-9" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-9"><a href="#LC-9" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-10"><a href="#Python3-Code-10" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-10"><a href="#大佬题解-10" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-10"><a href="#LC-10" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-11"><a href="#Python3-Code-11" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-11"><a href="#大佬题解-11" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-11"><a href="#LC-11" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-12"><a href="#Python3-Code-12" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-12"><a href="#大佬题解-12" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-12"><a href="#LC-12" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-13"><a href="#Python3-Code-13" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-13"><a href="#大佬题解-13" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-13"><a href="#LC-13" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-14"><a href="#Python3-Code-14" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-14"><a href="#大佬题解-14" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-14"><a href="#LC-14" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-15"><a href="#题目-15" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-15"><a href="#Python3-Code-15" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-15"><a href="#大佬题解-15" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-15"><a href="#LC-15" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-16"><a href="#题目-16" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-16"><a href="#Python3-Code-16" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-16"><a href="#大佬题解-16" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC-16"><a href="#LC-16" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h2><h3 id="题目-17"><a href="#题目-17" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h3><h3 id="Python3-Code-17"><a href="#Python3-Code-17" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析   <ul><li>时间复杂度：<script type="math/tex">O(n)</script>。  </li><li>空间复杂度：<script type="math/tex">O(s)</script>。 </li></ul></li></ul><h4 id="大佬题解-17"><a href="#大佬题解-17" class="headerlink" title="大佬题解"></a>大佬题解</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据类型" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希表</title>
    <link href="http://watermelondrip.github.io/2021/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>http://watermelondrip.github.io/2021/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/</id>
    <published>2021-04-09T02:49:24.978Z</published>
    <updated>2021-04-09T02:49:24.978Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈希表<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%93%88%E5%B8%8C%E8%A1%A8.md">刷题顺序</a></p><p><a href="https://www.edureka.co/blog/data-structures-in-python/">data structures</a></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典和列表完全不同，字典里的对象是无序的，他是通过一对对的键和值来反映一种映射关系。字典里，每个键都是唯一的，我们可以通过键来存储对应的值，而不能像列表那样通过位置来索引。</p><p>生成字典的方法：第一种方法：初始为空字典，动态填充新的键和值。重点是第二种方法，用列表动态生成字典。第三种方法，用键值对元组组成的列表构造字典。</p><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><ul><li>哈希映射的用途： 我个人理解是方便搜索定位吧</li></ul><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h2 id="大佬解释"><a href="#大佬解释" class="headerlink" title="大佬解释"></a>大佬解释</h2><ul><li><a href="https://www.zhihu.com/question/58099937">Python中列表和字典有什么区别，分别适用于什么场景？</a></li></ul><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id="LC1-两数之和-两数之和"><a href="#LC1-两数之和-两数之和" class="headerlink" title="(LC1)  两数之和    两数之和"></a>(LC1)  两数之和   <a href="https://leetcode-cn.com/problems/two-sum/description/"> 两数之和</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 </span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li> 注意到方法一的时间复杂度较高的原因是寻找 <code>target - x</code> 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。<br> 使用哈希表，可以将寻找 <code>target - x</code> 的时间复杂度降低到从 <script type="math/tex">O(N)</script>  降低到 <code>$O(1)$</code> 。<br> 这样我们创建一个哈希表，对于每一个 <code>x</code>，我们首先查询哈希表中是否存在 <code>target - x</code>，然后将 x 插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。 </li><li>可以先对数组进行排序，然后使用双指针方法或者二分查找方法。这样做的时间复杂度为 $O(NlogN)$，空间复杂度为 $O(1)$。</li><li>用 HashMap 存储数组元素和索引的映射，在访问到 <code>nums[i]</code> 时，判断 HashMap 中是否存在 <code>target - nums[i]</code>，如果存在说明 <code>target - nums[i]</code> 所在的索引和 <code>i</code> 就是要找的两个数。该方法的时间复杂度为 $O(N)$，空间复杂度为 $O(N)$，使用空间来换取时间。</li></ol><h3 id="Python3-Code"><a href="#Python3-Code" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[int]:</span></span><br><span class="line">        hashtable = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i , num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> hashtable:</span><br><span class="line">                <span class="keyword">return</span> [hashtable[target - num], i]</span><br><span class="line">            hashtable[num] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O( n)</script>   </li><li>空间复杂度：<script type="math/tex">O( n )</script> </li></ul></li></ul><h4 id="大佬题解"><a href="#大佬题解" class="headerlink" title="大佬题解"></a>大佬题解</h4><h2 id="LC217-存在重复元素-存在重复元素"><a href="#LC217-存在重复元素-存在重复元素" class="headerlink" title="(LC217)  存在重复元素  存在重复元素"></a>(LC217)  存在重复元素  <a href="https://leetcode-cn.com/problems/contains-duplicate/">存在重复元素</a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: true</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><code>set</code>的特点是不重复的数组。 比较数组<code>nums</code>和集合<code>nums</code>长度，如果长度不一致，就返回<code>true</code>，否则返回<code>False</code></li><li>字典， 遍历<code>nums</code>，将其加入字典中，加入之前判断一下是否存在，如果存在就return False,否则true</li></ol><h3 id="Python3-Code-1"><a href="#Python3-Code-1" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; bool:</span> <span class="comment"># 思路1：set思路</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) != <span class="built_in">len</span>(<span class="built_in">set</span>(nums)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; bool:</span> <span class="comment"># 思路2：dic思路</span></span><br><span class="line">        pairs = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> pairs:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            pairs[num] = i</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>复杂度分析 （思路1,思路2）<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O( n)</script>   </li><li>空间复杂度：<script type="math/tex">O( n )</script> </li></ul></li></ul><h4 id="大佬题解-1"><a href="#大佬题解-1" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC594-最长和谐序列-最长和谐序列"><a href="#LC594-最长和谐序列-最长和谐序列" class="headerlink" title="(LC594)  最长和谐序列  最长和谐序列"></a>(LC594)  最长和谐序列  <a href="">最长和谐序列</a></h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 正好是 1 。</p><p>现在，给你一个整数数组 nums ，请你在所有可能的子序列中找到最长的和谐子序列的长度。</p><p>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,2,2,5,2,3,7]</span><br><span class="line">输出：5</span><br><span class="line">解释：最长的和谐子序列是 [3,2,2,2,3]</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><ul><li>枚举：我们可以枚举数组中的每一个元素，对于当前枚举的元素<code>x</code>，它可以和<code>x+1</code>组成和谐子序列。我们遍历一遍整个数组，找出等于<code>x</code>或<code>x+1</code>的元素的个数，就可以得到以<code>x</code>为最小值的和谐子序列的长度。（一开始我同时找了<code>x-1</code>和<code>x+1</code>，其实就找<code>x+1</code>就行，再找<code>x-1</code>就重复了，比如<code>1</code>找<code>2</code>，<code>2</code>又找<code>1</code>。不是一样的吗！）</li><li>字典：枚举超时的，怎么办？我们枚举完<code>x</code>后，其实可以通过HashMap来直接找到<code>x</code>和<code>x+1</code>出现的次数。这样就能在$O(1)$的时间内得到<code>x</code>和<code>x+1</code>的次数。我们首先还是遍历一遍数组，得到HashMap。随后遍历哈希映射，设当前遍历到的key-value对为<code>(x,value)</code>，那么我们就查询<code>x+1</code>在HashMap 中对应的值，就得到了<code>x</code>和<code>x+1</code>出现的次数。</li></ul><h3 id="Python3-Code-2"><a href="#Python3-Code-2" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLHS</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        dic_nums = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            dic_nums[num] = dic_nums.get(num,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">      </span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key,value <span class="keyword">in</span> dic_nums.items():</span><br><span class="line">            <span class="keyword">if</span> dic_nums.get(key+<span class="number">1</span>,<span class="number">0</span>) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = dic_nums.get(key+<span class="number">1</span>,<span class="number">0</span>)+ value</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, tmp)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n)</script>   </li><li>空间复杂度：<script type="math/tex">O(n)</script> </li></ul></li></ul><h4 id="大佬题解-2"><a href="#大佬题解-2" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC128-最长连续序列-最长连续序列"><a href="#LC128-最长连续序列-最长连续序列" class="headerlink" title="(LC128)  最长连续序列   最长连续序列"></a>(LC128)  最长连续序列  <a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/"> 最长连续序列</a></h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [100,4,200,1,3,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ol><li>暴力改良版：首先我们会想到最直接暴力的破解。我们可以用一个<code>set</code>把给的数组，去重的保存起来。然后再考虑数组的每个数，比如这个数是<code>n</code>，然后看到<code>n+1</code>在不在<code>set</code>中，然后再看<code>n+2</code>。这样时间复杂度就是$n^2$。 如果我们只考虑从序列最小的数开始的话，我们就直接跳过了很多数，复杂度就降低了。</li><li></li></ol><h4 id="Python3-Code-3"><a href="#Python3-Code-3" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  <span class="comment">#思路1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestConsecutive</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nums_set = <span class="built_in">set</span>(nums)</span><br><span class="line">        longest_seq = <span class="number">1</span></span><br><span class="line">        current_seq = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums_set:</span><br><span class="line">            <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">in</span> nums_set:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> num + <span class="number">1</span> <span class="keyword">in</span> nums_set:</span><br><span class="line">                <span class="keyword">while</span> num + <span class="number">1</span> <span class="keyword">in</span> nums_set:</span><br><span class="line">                    current_seq += <span class="number">1</span></span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">                longest_seq = <span class="built_in">max</span>(longest_seq, current_seq)</span><br><span class="line">                current_seq = <span class="number">1</span></span><br><span class="line">                print(longest_seq)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> longest_seq</span><br></pre></td></tr></tbody></table></figure><ul><li>复杂度分析<br>虽然 for 循环里套了 while 循环，但每个元素其实最多也就是被访问两次。比如极端情况 987654 ，98765 循环的时候都不会进入 while 循环，只有到 4 的时候才进入了 while 循环。所以总共的话， 98765 也只会被访问两次，所以时间复杂度就是 O(2n) 了。<br>令 n 为数组长度。<ul><li>时间复杂度：<script type="math/tex">O(n)</script>   </li><li>空间复杂度：<script type="math/tex">O(n)</script> </li></ul></li></ul><h4 id="大佬题解-3"><a href="#大佬题解-3" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC"><a href="#LC" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-4"><a href="#Python3-Code-4" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-4"><a href="#大佬题解-4" class="headerlink" title="大佬题解"></a>大佬题解</h4><h3 id="LC-1"><a href="#LC-1" class="headerlink" title="(LC )      "></a>(LC )    <a href="">  </a></h3><h4 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><h4 id="Python3-Code-5"><a href="#Python3-Code-5" class="headerlink" title="Python3 Code:"></a>Python3 Code:</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h4 id="大佬题解-5"><a href="#大佬题解-5" class="headerlink" title="大佬题解"></a>大佬题解</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="力扣" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/"/>
    
    <category term="力扣数据类型" scheme="http://watermelondrip.github.io/categories/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://watermelondrip.github.io/2021/04/09/%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    <id>http://watermelondrip.github.io/2021/04/09/%E7%8A%B6%E6%80%81%E6%9C%BA/</id>
    <published>2021-04-09T02:49:24.978Z</published>
    <updated>2021-04-30T02:47:40.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://www.cyc2018.xyz/%E5%85%B6%E5%AE%83/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.html#%E4%B8%80%E3%80%81%E5%89%8D%E8%A8%80">设计模式</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="实际开发" scheme="http://watermelondrip.github.io/categories/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="面向对象" scheme="http://watermelondrip.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
